// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for EnvironmentCategoryType.
const (
	DEVELOPMENT EnvironmentCategoryType = "DEVELOPMENT"
	PRODUCTION  EnvironmentCategoryType = "PRODUCTION"
	STAGING     EnvironmentCategoryType = "STAGING"
	TESTING     EnvironmentCategoryType = "TESTING"
)

// Defines values for StatusChangeResultType.
const (
	CHANGED     StatusChangeResultType = "CHANGED"
	FAILED      StatusChangeResultType = "FAILED"
	IGNORED     StatusChangeResultType = "IGNORED"
	NOTMODIFIED StatusChangeResultType = "NOT_MODIFIED"
)

// Defines values for TierType.
const (
	STANDALONE TierType = "STANDALONE"
	TIER       TierType = "TIER"
)

// ApplicationRequest defines model for ApplicationRequest.
type ApplicationRequest struct {
	CreateNewVersion        *bool                    `json:"createNewVersion,omitempty"`
	DeploymentAttributes    *[]Attribute             `json:"deploymentAttributes,omitempty"`
	DeploymentConfiguration *DeploymentConfiguration `json:"deploymentConfiguration,omitempty"`
	IncomingDependencies    *[]NamedReference        `json:"incomingDependencies,omitempty"`
	MappedProjectId         *int64                   `json:"mappedProjectId,omitempty"`
	Name                    string                   `json:"name"`
	OutgoingDependencies    *[]NamedReference        `json:"outgoingDependencies,omitempty"`
	Parents                 *[]NamedReference        `json:"parents,omitempty"`
	TierType                *TierType                `json:"tierType,omitempty"`
	Tiers                   *[]NamedReference        `json:"tiers,omitempty"`
	VersionPrefix           *string                  `json:"versionPrefix,omitempty"`
}

// ApplicationResponse defines model for ApplicationResponse.
type ApplicationResponse struct {
	CreateNewVersion        *bool                    `json:"createNewVersion,omitempty"`
	DeploymentAttributes    *[]Attribute             `json:"deploymentAttributes,omitempty"`
	DeploymentConfiguration *DeploymentConfiguration `json:"deploymentConfiguration,omitempty"`
	Id                      int32                    `json:"id"`
	IncomingDependencies    *[]NamedReference        `json:"incomingDependencies,omitempty"`
	MappedProjectId         *int64                   `json:"mappedProjectId,omitempty"`
	Name                    string                   `json:"name"`
	OutgoingDependencies    *[]NamedReference        `json:"outgoingDependencies,omitempty"`
	Parents                 *[]NamedReference        `json:"parents,omitempty"`
	TierType                *TierType                `json:"tierType,omitempty"`
	Tiers                   *[]NamedReference        `json:"tiers,omitempty"`
	VersionPrefix           *string                  `json:"versionPrefix,omitempty"`
}

// Attribute defines model for Attribute.
type Attribute struct {
	CreatedBy  *string `json:"createdBy,omitempty"`
	CreatedOn  *int    `json:"createdOn,omitempty"`
	Id         *int32  `json:"id,omitempty"`
	Key        *string `json:"key,omitempty"`
	ModifiedBy *string `json:"modifiedBy,omitempty"`
	ModifiedOn *int    `json:"modifiedOn,omitempty"`
	Secured    *bool   `json:"secured,omitempty"`
	Type       *string `json:"type,omitempty"`
}

// AttributeValue defines model for AttributeValue.
type AttributeValue struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// CreatableNamedReference defines model for CreatableNamedReference.
type CreatableNamedReference struct {
	// AutoCreate should we create reference if not existing
	AutoCreate *bool   `json:"autoCreate,omitempty"`
	Id         *int32  `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
}

// DeployedIssues defines model for DeployedIssues.
type DeployedIssues struct {
	AddDoneIssuesFixedInVersion *bool     `json:"addDoneIssuesFixedInVersion,omitempty"`
	IssueKeys                   *[]string `json:"issueKeys,omitempty"`
	Jql                         *string   `json:"jql,omitempty"`
	NoFixVersionUpdate          *bool     `json:"noFixVersionUpdate,omitempty"`
	SendJiraNotification        *bool     `json:"sendJiraNotification,omitempty"`
}

// DeploymentConfiguration defines model for DeploymentConfiguration.
type DeploymentConfiguration struct {
	PreventDeploymentMerge *bool `json:"preventDeploymentMerge,omitempty"`
	ReadonlyDeployedIssues *bool `json:"readonlyDeployedIssues,omitempty"`
	ShowBuildNumber        *bool `json:"showBuildNumber,omitempty"`
	ShowDescription        *bool `json:"showDescription,omitempty"`
}

// DeploymentDetail defines model for DeploymentDetail.
type DeploymentDetail struct {
	Attributes  *map[string]string `json:"attributes,omitempty"`
	BuildNumber *string            `json:"buildNumber,omitempty"`

	// DeployedOn ISO-8601 date time format
	DeployedOn    *string   `json:"deployedOn,omitempty"`
	Deployer      *string   `json:"deployer,omitempty"`
	Description   *string   `json:"description,omitempty"`
	EnvironmentId *int32    `json:"environmentId,omitempty"`
	Id            *int32    `json:"id,omitempty"`
	IssueKeys     *[]string `json:"issueKeys,omitempty"`
	VersionId     *string   `json:"versionId,omitempty"`
	VersionName   *string   `json:"versionName,omitempty"`
}

// DeploymentInfo defines model for DeploymentInfo.
type DeploymentInfo struct {
	Attributes  *map[string]string `json:"attributes,omitempty"`
	BuildNumber *string            `json:"buildNumber,omitempty"`

	// DeployedDate ISO-8601 date time format
	DeployedDate *string         `json:"deployedDate,omitempty"`
	Description  *string         `json:"description,omitempty"`
	Issues       *DeployedIssues `json:"issues,omitempty"`
	VersionId    *string         `json:"versionId,omitempty"`
	VersionName  *string         `json:"versionName,omitempty"`
}

// DeploymentRequest defines model for DeploymentRequest.
type DeploymentRequest struct {
	Attributes   *map[string]string `json:"attributes,omitempty"`
	BuildNumber  *string            `json:"buildNumber,omitempty"`
	DeploymentId *int32             `json:"deploymentId,omitempty"`
	Description  *string            `json:"description,omitempty"`
	Id           *int32             `json:"id,omitempty"`
	IssueKeys    *[]string          `json:"issueKeys,omitempty"`
	VersionId    *string            `json:"versionId,omitempty"`
	VersionName  *string            `json:"versionName,omitempty"`
}

// DeploymentResponse defines model for DeploymentResponse.
type DeploymentResponse struct {
	ApplicationId     *int32             `json:"applicationId,omitempty"`
	ApplicationName   *string            `json:"applicationName,omitempty"`
	Attributes        *map[string]string `json:"attributes,omitempty"`
	BuildNumber       *string            `json:"buildNumber,omitempty"`
	CategoryId        *int32             `json:"categoryId,omitempty"`
	CategoryName      *string            `json:"categoryName,omitempty"`
	DeployedTime      *int               `json:"deployedTime,omitempty"`
	Deployer          *string            `json:"deployer,omitempty"`
	DeploymentId      *int32             `json:"deploymentId,omitempty"`
	Description       *string            `json:"description,omitempty"`
	Duration          *int64             `json:"duration,omitempty"`
	EndTime           *int               `json:"endTime,omitempty"`
	EnvironmentId     *int32             `json:"environmentId,omitempty"`
	Id                *int32             `json:"id,omitempty"`
	IssueKeys         *[]string          `json:"issueKeys,omitempty"`
	OrderedAttributes *[]AttributeValue  `json:"orderedAttributes,omitempty"`
	VersionId         *string            `json:"versionId,omitempty"`
	VersionName       *string            `json:"versionName,omitempty"`
}

// EnvironmentCategory defines model for EnvironmentCategory.
type EnvironmentCategory struct {
	Id    int32                    `json:"id"`
	Name  string                   `json:"name"`
	Order *int32                   `json:"order,omitempty"`
	Type  *EnvironmentCategoryType `json:"type,omitempty"`
}

// EnvironmentCategoryType defines model for EnvironmentCategoryType.
type EnvironmentCategoryType string

// EnvironmentFilter defines model for EnvironmentFilter.
type EnvironmentFilter struct {
	Criteria  *[]EnvironmentSearchCriterion `json:"criteria,omitempty"`
	Expand    *bool                         `json:"expand,omitempty"`
	Limit     *int32                        `json:"limit,omitempty"`
	Offset    *int32                        `json:"offset,omitempty"`
	SortBy    *string                       `json:"sortBy,omitempty"`
	SortOrder *string                       `json:"sortOrder,omitempty"`
}

// EnvironmentInfo defines model for EnvironmentInfo.
type EnvironmentInfo struct {
	Attributes *map[string]string `json:"attributes,omitempty"`
	Name       *string            `json:"name,omitempty"`
	Url        *string            `json:"url,omitempty"`
}

// EnvironmentInfoRequest defines model for EnvironmentInfoRequest.
type EnvironmentInfoRequest struct {
	Deployment          *DeploymentInfo          `json:"deployment,omitempty"`
	Environment         EnvironmentInfo          `json:"environment"`
	EnvironmentSelector *EnvironmentInfoSelector `json:"environmentSelector,omitempty"`
	Status              *NamedReference          `json:"status,omitempty"`
}

// EnvironmentInfoResponse defines model for EnvironmentInfoResponse.
type EnvironmentInfoResponse struct {
	Deployment  *DeploymentDetail `json:"deployment,omitempty"`
	Environment NamedReference    `json:"environment"`
	Status      *NamedReference   `json:"status,omitempty"`
}

// EnvironmentInfoSelector defines model for EnvironmentInfoSelector.
type EnvironmentInfoSelector struct {
	Application *CreatableNamedReference `json:"application,omitempty"`
	Category    *CreatableNamedReference `json:"category,omitempty"`
	Environment *CreatableNamedReference `json:"environment,omitempty"`
}

// EnvironmentPermissionScheme defines model for EnvironmentPermissionScheme.
type EnvironmentPermissionScheme struct {
	Description string   `json:"description"`
	Global      *bool    `json:"global,omitempty"`
	Id          int32    `json:"id"`
	Name        string   `json:"name"`
	Roles       []string `json:"roles"`
}

// EnvironmentReference defines model for EnvironmentReference.
type EnvironmentReference struct {
	Application *NamedReference `json:"application,omitempty"`
	Category    *NamedReference `json:"category,omitempty"`
	Id          *int32          `json:"id,omitempty"`
	Name        *string         `json:"name,omitempty"`
}

// EnvironmentReferenceResponse defines model for EnvironmentReferenceResponse.
type EnvironmentReferenceResponse struct {
	Items *[]EnvironmentReference `json:"items,omitempty"`
}

// EnvironmentRequest defines model for EnvironmentRequest.
type EnvironmentRequest struct {
	Application                 NamedReference     `json:"application"`
	Attributes                  *map[string]string `json:"attributes,omitempty"`
	AttributesToDelete          *[]string          `json:"attributesToDelete,omitempty"`
	Category                    NamedReference     `json:"category"`
	Description                 *string            `json:"description,omitempty"`
	EnvironmentPermissionScheme *NamedReference    `json:"environmentPermissionScheme,omitempty"`
	IncomingDependencies        *[]NamedReference  `json:"incomingDependencies,omitempty"`
	Name                        string             `json:"name"`
	OutgoingDependencies        *[]NamedReference  `json:"outgoingDependencies,omitempty"`
	Parent                      *NamedReference    `json:"parent,omitempty"`
	Tiers                       *[]NamedReference  `json:"tiers,omitempty"`
	Url                         *string            `json:"url,omitempty"`
}

// EnvironmentResponse defines model for EnvironmentResponse.
type EnvironmentResponse struct {
	Application                 ApplicationResponse          `json:"application"`
	Attributes                  *map[string]string           `json:"attributes,omitempty"`
	Category                    EnvironmentCategory          `json:"category"`
	Deployment                  *DeploymentResponse          `json:"deployment,omitempty"`
	Description                 *string                      `json:"description,omitempty"`
	EnvironmentPermissionScheme *EnvironmentPermissionScheme `json:"environmentPermissionScheme,omitempty"`
	Id                          *int32                       `json:"id,omitempty"`
	IncomingDependencies        *[]NamedReference            `json:"incomingDependencies,omitempty"`
	Name                        string                       `json:"name"`
	OutgoingDependencies        *[]NamedReference            `json:"outgoingDependencies,omitempty"`
	Parent                      *NamedReference              `json:"parent,omitempty"`
	Status                      *EnvironmentStatus           `json:"status,omitempty"`
	Tiers                       *[]NamedReference            `json:"tiers,omitempty"`
	Url                         *string                      `json:"url,omitempty"`
	Watched                     *bool                        `json:"watched,omitempty"`
}

// EnvironmentSearchCriterion defines model for EnvironmentSearchCriterion.
type EnvironmentSearchCriterion struct {
	Name   *string   `json:"name,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

// EnvironmentStatus defines model for EnvironmentStatus.
type EnvironmentStatus struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          int32   `json:"id"`
	Name        string  `json:"name"`
	Order       *int32  `json:"order,omitempty"`
}

// EnvironmentStatusChange defines model for EnvironmentStatusChange.
type EnvironmentStatusChange struct {
	Environment *NamedReference     `json:"environment,omitempty"`
	Result      *StatusChangeResult `json:"result,omitempty"`
}

// EnvironmentStatusChangeRequest defines model for EnvironmentStatusChangeRequest.
type EnvironmentStatusChangeRequest struct {
	Id   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// EnvironmentWatcher defines model for EnvironmentWatcher.
type EnvironmentWatcher struct {
	EnvironmentId           int32   `json:"environmentId"`
	Id                      *int32  `json:"id,omitempty"`
	UserKey                 *string `json:"userKey,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	WatchDeployedVersion    bool    `json:"watchDeployedVersion"`
	WatchEnvironmentChanged bool    `json:"watchEnvironmentChanged"`
	WatchIssueAdded         bool    `json:"watchIssueAdded"`
	WatchIssueRemoved       bool    `json:"watchIssueRemoved"`
	WatchStatus             bool    `json:"watchStatus"`
}

// EnvironmentsScope defines model for EnvironmentsScope.
type EnvironmentsScope struct {
	Criteria *[]EnvironmentSearchCriterion `json:"criteria,omitempty"`
}

// ErrorCollection defines model for ErrorCollection.
type ErrorCollection struct {
	ErrorMessages *[]string          `json:"errorMessages,omitempty"`
	Errors        *map[string]string `json:"errors,omitempty"`
	Status        *int32             `json:"status,omitempty"`
}

// IssueDeployedRequest defines model for IssueDeployedRequest.
type IssueDeployedRequest struct {
	BuildNumber         *string            `json:"buildNumber,omitempty"`
	IssueKey            *string            `json:"issueKey,omitempty"`
	NoEmailNotification *bool              `json:"noEmailNotification,omitempty"`
	Scope               *EnvironmentsScope `json:"scope,omitempty"`
	VersionName         *string            `json:"versionName,omitempty"`
}

// NamedReference defines model for NamedReference.
type NamedReference struct {
	Id   *int32  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// OptionReferenceResource defines model for OptionReferenceResource.
type OptionReferenceResource struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// OptionReferenceResourceResponse defines model for OptionReferenceResourceResponse.
type OptionReferenceResourceResponse struct {
	Items *[]OptionReferenceResource `json:"items,omitempty"`
}

// PaginatedEnvironmentResponse defines model for PaginatedEnvironmentResponse.
type PaginatedEnvironmentResponse struct {
	Count        int64                  `json:"count"`
	Environments *[]EnvironmentResponse `json:"environments,omitempty"`
	Limit        *int32                 `json:"limit,omitempty"`
	Offset       int64                  `json:"offset"`
}

// ScopedStatusChangeRequest defines model for ScopedStatusChangeRequest.
type ScopedStatusChangeRequest struct {
	IgnoredStatuses *[]NamedReference          `json:"ignoredStatuses,omitempty"`
	Scope           *EnvironmentsScope         `json:"scope,omitempty"`
	Status          *NamedReference            `json:"status,omitempty"`
	StatusMapping   *map[string]NamedReference `json:"statusMapping,omitempty"`
}

// StatusChange defines model for StatusChange.
type StatusChange struct {
	ApplicationId   *int32  `json:"applicationId,omitempty"`
	ApplicationName *string `json:"applicationName,omitempty"`
	CategoryId      *int32  `json:"categoryId,omitempty"`
	CategoryName    *string `json:"categoryName,omitempty"`
	ChangedBy       *string `json:"changedBy,omitempty"`
	ChangedOn       *int64  `json:"changedOn,omitempty"`

	// Duration duration in ms. Only present if endTime is set
	Duration *int64 `json:"duration,omitempty"`

	// EndTime endTime is not defined if status is the current one
	EndTime    *int64             `json:"endTime,omitempty"`
	Id         *int32             `json:"id,omitempty"`
	Status     *EnvironmentStatus `json:"status,omitempty"`
	StatusName *string            `json:"statusName,omitempty"`
}

// StatusChangeResult defines model for StatusChangeResult.
type StatusChangeResult struct {
	CurrentStatus  *NamedReference         `json:"currentStatus,omitempty"`
	Errors         *ErrorCollection        `json:"errors,omitempty"`
	PreviousStatus *NamedReference         `json:"previousStatus,omitempty"`
	Type           *StatusChangeResultType `json:"type,omitempty"`
}

// StatusChangeResultType defines model for StatusChangeResultType.
type StatusChangeResultType string

// StatusChangesResponse defines model for StatusChangesResponse.
type StatusChangesResponse struct {
	Environments    *[]EnvironmentStatusChange `json:"environments,omitempty"`
	RequestedStatus *NamedReference            `json:"requestedStatus,omitempty"`
}

// TierType defines model for TierType.
type TierType string

// VersionInfo defines model for VersionInfo.
type VersionInfo struct {
	FixedIssues        *[]string `json:"fixedIssues,omitempty"`
	ReleaseDate        *string   `json:"releaseDate,omitempty"`
	Released           *bool     `json:"released,omitempty"`
	StartDate          *string   `json:"startDate,omitempty"`
	VersionDescription *string   `json:"versionDescription,omitempty"`
	VersionId          int64     `json:"versionId"`
	VersionName        string    `json:"versionName"`
}

// VersionInfoRequest defines model for VersionInfoRequest.
type VersionInfoRequest struct {
	Application *NamedReference `json:"application,omitempty"`
	Issues      *VersionIssues  `json:"issues,omitempty"`

	// ReleaseDate ISO-8601 date time format
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Released    *bool   `json:"released,omitempty"`

	// StartDate ISO-8601 date time format
	StartDate          *string `json:"startDate,omitempty"`
	VersionDescription *string `json:"versionDescription,omitempty"`
	VersionName        string  `json:"versionName"`
}

// VersionInfoResponse defines model for VersionInfoResponse.
type VersionInfoResponse struct {
	Versions *[]VersionInfo `json:"versions,omitempty"`
}

// VersionIssues defines model for VersionIssues.
type VersionIssues struct {
	IssueKeys            *[]string `json:"issueKeys,omitempty"`
	Jql                  *string   `json:"jql,omitempty"`
	SendJiraNotification *bool     `json:"sendJiraNotification,omitempty"`
}

// WatcherStatistics defines model for WatcherStatistics.
type WatcherStatistics struct {
	Dumb *string `json:"dumb,omitempty"`
}

// N400 defines model for 400.
type N400 = ErrorCollection

// N404 defines model for 404.
type N404 = ErrorCollection

// GetApplicationsParams defines parameters for GetApplications.
type GetApplicationsParams struct {
	// Expand Set it to false for lighter JSON
	Expand *bool `form:"_expand,omitempty" json:"_expand,omitempty"`
}

// GetCustomfieldEnvironmentSelectableParams defines parameters for GetCustomfieldEnvironmentSelectable.
type GetCustomfieldEnvironmentSelectableParams struct {
	// ProjectKey TEST
	ProjectKey *string `form:"projectKey,omitempty" json:"projectKey,omitempty"`

	// ProjectId 10101
	ProjectId *int64 `form:"projectId,omitempty" json:"projectId,omitempty"`

	// CustomfieldKey apwide-environment-detected-in
	CustomfieldKey *string `form:"customfieldKey,omitempty" json:"customfieldKey,omitempty"`

	// CustomfieldName Detected in
	CustomfieldName *string `form:"customfieldName,omitempty" json:"customfieldName,omitempty"`

	// ExcludedEnvironmentIds Comma separated list of environment ids to exclude from result
	ExcludedEnvironmentIds *string `form:"excludedEnvironmentIds,omitempty" json:"excludedEnvironmentIds,omitempty"`

	// ExcludedOptionIds Comma separated list of option ids to exclude from result
	ExcludedOptionIds *string `form:"excludedOptionIds,omitempty" json:"excludedOptionIds,omitempty"`

	// EnvironmentId Environment id (ex: 23)
	EnvironmentId *[]int64 `form:"environmentId,omitempty" json:"environmentId,omitempty"`

	// EnvironmentName Environment name (ex: eCommerce Dev 1)
	EnvironmentName *[]string `form:"environmentName,omitempty" json:"environmentName,omitempty"`

	// ApplicationName Application name (ex: eCommerce)
	ApplicationName *[]string `form:"applicationName,omitempty" json:"applicationName,omitempty"`

	// ApplicationId Application id (ex: 23)
	ApplicationId *[]int64 `form:"applicationId,omitempty" json:"applicationId,omitempty"`

	// CategoryName Category Name (ex: Staging)
	CategoryName *[]string `form:"categoryName,omitempty" json:"categoryName,omitempty"`

	// CategoryId Category id (ex: 2)
	CategoryId *[]int64 `form:"categoryId,omitempty" json:"categoryId,omitempty"`

	// StatusName Status Name (ex: Slow)
	StatusName *[]string `form:"statusName,omitempty" json:"statusName,omitempty"`

	// StatusId Status id (ex: 3)
	StatusId *[]int64 `form:"statusId,omitempty" json:"statusId,omitempty"`

	// PermissionSchemeName Permission scheme name (ex: Default Environment Permission Scheme)
	PermissionSchemeName *[]string `form:"permissionSchemeName,omitempty" json:"permissionSchemeName,omitempty"`

	// PermissionSchemeId Permission scheme id (ex: 1)
	PermissionSchemeId *[]int64 `form:"permissionSchemeId,omitempty" json:"permissionSchemeId,omitempty"`

	// Limit Max number of results (0 = unlimited)
	Limit *int64 `form:"_limit,omitempty" json:"_limit,omitempty"`

	// Offset First result to return (ex: 10)
	Offset *int64 `form:"_offset,omitempty" json:"_offset,omitempty"`

	// SortOrder Sort order
	SortOrder *string `form:"_sortOrder,omitempty" json:"_sortOrder,omitempty"`

	// SortBy Sort by
	SortBy *string `form:"_sortBy,omitempty" json:"_sortBy,omitempty"`

	// Expand Set it to false for lighter JSON
	Expand *bool `form:"_expand,omitempty" json:"_expand,omitempty"`
}

// GetCustomfieldEnvironmentSelectedParams defines parameters for GetCustomfieldEnvironmentSelected.
type GetCustomfieldEnvironmentSelectedParams struct {
	IssueKey        *string `form:"issueKey,omitempty" json:"issueKey,omitempty"`
	CustomfieldKey  *string `form:"customfieldKey,omitempty" json:"customfieldKey,omitempty"`
	CustomfieldName *string `form:"customfieldName,omitempty" json:"customfieldName,omitempty"`
}

// GetDeploymentParams defines parameters for GetDeployment.
type GetDeploymentParams struct {
	// EnvironmentId Environment id. Ex: 1
	EnvironmentId *int32 `form:"environmentId,omitempty" json:"environmentId,omitempty"`

	// Application Application name. Ex: eCommerce
	Application *string `form:"application,omitempty" json:"application,omitempty"`

	// Category Category name. Ex: Staging
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// DateTime Date in the past. Ex: 2018-01-31 13:30 or in ms : 1537679702182
	DateTime *string `form:"dateTime,omitempty" json:"dateTime,omitempty"`

	// Time Absolute time in ms. Ex: 12300054 . Note that time must be in
	// the past. Time will override dateTime param if both params are set.
	Time *int64 `form:"time,omitempty" json:"time,omitempty"`
}

// PutDeploymentParams defines parameters for PutDeployment.
type PutDeploymentParams struct {
	// EnvironmentId Environment id. Ex: 1
	EnvironmentId *int32 `form:"environmentId,omitempty" json:"environmentId,omitempty"`

	// Application Application name. Ex: eCommerce
	Application *string `form:"application,omitempty" json:"application,omitempty"`

	// Category Category name. Ex: Staging
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// DateTime Date in the past. Ex: 2018-01-31 13:30. Note that timezone of
	// the server will be used to get the time! Prefer using the time parameter
	// in ms to avoid timezone issues.
	DateTime *string `form:"dateTime,omitempty" json:"dateTime,omitempty"`

	// Time Absolute time in ms. Ex: 12300054 . Note that time must be in
	// the past. Time will override dateTime param if both params are set.
	Time *int64 `form:"time,omitempty" json:"time,omitempty"`
}

// GetDeploymentsParams defines parameters for GetDeployments.
type GetDeploymentsParams struct {
	EnvironmentId *int32  `form:"environmentId,omitempty" json:"environmentId,omitempty"`
	Application   *string `form:"application,omitempty" json:"application,omitempty"`
	Category      *string `form:"category,omitempty" json:"category,omitempty"`

	// Start Ex: 2018-01-31
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// End Ex: 2018-02-25
	End *string `form:"end,omitempty" json:"end,omitempty"`

	// MaxResults Unlimited number of results: -1
	MaxResults *int64 `form:"maxResults,omitempty" json:"maxResults,omitempty"`

	// Expand Set it to false for lighter JSON
	Expand *bool `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetEnvironmentParams defines parameters for GetEnvironment.
type GetEnvironmentParams struct {
	// Application Application name. Ex: eCommerce
	Application string `form:"application" json:"application"`

	// Category Category name. Ex: Staging
	Category string `form:"category" json:"category"`
}

// GetEnvironmentsSearchParams defines parameters for GetEnvironmentsSearch.
type GetEnvironmentsSearchParams struct {
	// ApplicationName Application name (ex: eCommerce)
	ApplicationName *[]string `form:"applicationName,omitempty" json:"applicationName,omitempty"`

	// ApplicationId Application id (ex: 23)
	ApplicationId *[]int64 `form:"applicationId,omitempty" json:"applicationId,omitempty"`

	// CategoryName Category Name (ex: Staging)
	CategoryName *[]string `form:"categoryName,omitempty" json:"categoryName,omitempty"`

	// CategoryId Category id (ex: 2)
	CategoryId *[]int64 `form:"categoryId,omitempty" json:"categoryId,omitempty"`

	// StatusName Status Name (ex: Slow)
	StatusName *[]string `form:"statusName,omitempty" json:"statusName,omitempty"`

	// StatusId Status id (ex: 3)
	StatusId *[]int64 `form:"statusId,omitempty" json:"statusId,omitempty"`

	// PermissionSchemeName Permission scheme name (ex: Default Environment Permission Scheme)
	PermissionSchemeName *[]string `form:"permissionSchemeName,omitempty" json:"permissionSchemeName,omitempty"`

	// PermissionSchemeId Permission scheme id (ex: 1)
	PermissionSchemeId *[]int64 `form:"permissionSchemeId,omitempty" json:"permissionSchemeId,omitempty"`

	// Limit Max number of results (0 = unlimited)
	Limit *int64 `form:"_limit,omitempty" json:"_limit,omitempty"`

	// Offset First result to return (ex: 10)
	Offset *int64 `form:"_offset,omitempty" json:"_offset,omitempty"`

	// SortOrder Sort order
	SortOrder *string `form:"_sortOrder,omitempty" json:"_sortOrder,omitempty"`

	// SortBy Sort by
	SortBy *string `form:"_sortBy,omitempty" json:"_sortBy,omitempty"`

	// Expand Set it to false for lighter JSON
	Expand *bool `form:"_expand,omitempty" json:"_expand,omitempty"`
}

// GetEnvironmentsSearchPaginatedParams defines parameters for GetEnvironmentsSearchPaginated.
type GetEnvironmentsSearchPaginatedParams struct {
	// EnvironmentId Environment id (ex: 23)
	EnvironmentId *[]int64 `form:"environmentId,omitempty" json:"environmentId,omitempty"`

	// EnvironmentName Environment name (ex: eCommerce Dev 1)
	EnvironmentName *[]string `form:"environmentName,omitempty" json:"environmentName,omitempty"`

	// ApplicationName Application name (ex: eCommerce)
	ApplicationName *[]string `form:"applicationName,omitempty" json:"applicationName,omitempty"`

	// ApplicationId Application id (ex: 23)
	ApplicationId *[]int64 `form:"applicationId,omitempty" json:"applicationId,omitempty"`

	// CategoryName Category Name (ex: Staging)
	CategoryName *[]string `form:"categoryName,omitempty" json:"categoryName,omitempty"`

	// CategoryId Category id (ex: 2)
	CategoryId *[]int64 `form:"categoryId,omitempty" json:"categoryId,omitempty"`

	// StatusName Status Name (ex: Slow)
	StatusName *[]string `form:"statusName,omitempty" json:"statusName,omitempty"`

	// StatusId Status id (ex: 3)
	StatusId *[]int64 `form:"statusId,omitempty" json:"statusId,omitempty"`

	// PermissionSchemeName Permission scheme name (ex: Default Environment Permission Scheme)
	PermissionSchemeName *[]string `form:"permissionSchemeName,omitempty" json:"permissionSchemeName,omitempty"`

	// PermissionSchemeId Permission scheme id (ex: 1)
	PermissionSchemeId *[]int64 `form:"permissionSchemeId,omitempty" json:"permissionSchemeId,omitempty"`

	// PanelSchemeId Panel scheme id (ex: 1)
	PanelSchemeId *[]int64 `form:"panelSchemeId,omitempty" json:"panelSchemeId,omitempty"`

	// TierRelation Tier relation type (ex: HAS_TIERS, HAS_NO_TIERS, HAS_PARENT, IS_TIER, IS_ORPHAN)
	TierRelation *[]string `form:"tierRelation,omitempty" json:"tierRelation,omitempty"`

	// Limit Max number of results (0 = unlimited)
	Limit *int64 `form:"_limit,omitempty" json:"_limit,omitempty"`

	// Offset First result to return (ex: 10)
	Offset *int64 `form:"_offset,omitempty" json:"_offset,omitempty"`

	// SortOrder Sort order
	SortOrder *string `form:"_sortOrder,omitempty" json:"_sortOrder,omitempty"`

	// SortBy Sort by
	SortBy *string `form:"_sortBy,omitempty" json:"_sortBy,omitempty"`

	// Expand Set it to false for lighter JSON
	Expand *bool `form:"_expand,omitempty" json:"_expand,omitempty"`
}

// GetStatusChangeParams defines parameters for GetStatusChange.
type GetStatusChangeParams struct {
	// EnvironmentId Environment id. Ex: 1
	EnvironmentId *int32 `form:"environmentId,omitempty" json:"environmentId,omitempty"`

	// Application Application name. Ex: eCommerce
	Application *string `form:"application,omitempty" json:"application,omitempty"`

	// Category Category name. Ex: Staging
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// PutStatusChangeParams defines parameters for PutStatusChange.
type PutStatusChangeParams struct {
	// EnvironmentId Environment id. Ex: 1
	EnvironmentId *int32 `form:"environmentId,omitempty" json:"environmentId,omitempty"`

	// Application Application name. Ex: eCommerce
	Application *string `form:"application,omitempty" json:"application,omitempty"`

	// Category Category name. Ex: Staging
	Category *string `form:"category,omitempty" json:"category,omitempty"`
}

// GetStatusChangesParams defines parameters for GetStatusChanges.
type GetStatusChangesParams struct {
	// EnvironmentId Environment id. Ex: 1
	EnvironmentId *int32 `form:"environmentId,omitempty" json:"environmentId,omitempty"`

	// Application Application name. Ex: eCommerce
	Application *string `form:"application,omitempty" json:"application,omitempty"`

	// Category Category name. Ex: Staging
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Start Ex: 2018-01-31
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// End Ex: 2019-01-31
	End *string `form:"end,omitempty" json:"end,omitempty"`

	// MaxResult Unlimited number of results: -1
	MaxResult *int64 `form:"maxResult,omitempty" json:"maxResult,omitempty"`

	// Expand Set it to false for lighter JSON
	Expand *bool `form:"expand,omitempty" json:"expand,omitempty"`
}

// DeleteWatcherUserParams defines parameters for DeleteWatcherUser.
type DeleteWatcherUserParams struct {
	EnvironmentId int32   `form:"environmentId" json:"environmentId"`
	UserName      *string `form:"userName,omitempty" json:"userName,omitempty"`
	UserKey       *string `form:"userKey,omitempty" json:"userKey,omitempty"`
}

// GetWatcherUserParams defines parameters for GetWatcherUser.
type GetWatcherUserParams struct {
	EnvironmentId int32   `form:"environmentId" json:"environmentId"`
	UserName      *string `form:"userName,omitempty" json:"userName,omitempty"`
	UserKey       *string `form:"userKey,omitempty" json:"userKey,omitempty"`
}

// PostWatcherUserParams defines parameters for PostWatcherUser.
type PostWatcherUserParams struct {
	EnvironmentId int32   `form:"environmentId" json:"environmentId"`
	UserName      *string `form:"userName,omitempty" json:"userName,omitempty"`
	UserKey       *string `form:"userKey,omitempty" json:"userKey,omitempty"`
}

// PutWatcherUserParams defines parameters for PutWatcherUser.
type PutWatcherUserParams struct {
	EnvironmentId int32   `form:"environmentId" json:"environmentId"`
	UserName      *string `form:"userName,omitempty" json:"userName,omitempty"`
	UserKey       *string `form:"userKey,omitempty" json:"userKey,omitempty"`
}

// PostApplicationJSONRequestBody defines body for PostApplication for application/json ContentType.
type PostApplicationJSONRequestBody = ApplicationRequest

// PutApplicationIdJSONRequestBody defines body for PutApplicationId for application/json ContentType.
type PutApplicationIdJSONRequestBody = ApplicationRequest

// PostCategoryJSONRequestBody defines body for PostCategory for application/json ContentType.
type PostCategoryJSONRequestBody = EnvironmentCategory

// PutCategoryIdJSONRequestBody defines body for PutCategoryId for application/json ContentType.
type PutCategoryIdJSONRequestBody = EnvironmentCategory

// PutDeploymentJSONRequestBody defines body for PutDeployment for application/json ContentType.
type PutDeploymentJSONRequestBody = DeploymentRequest

// PostDeploymentsIssueJSONRequestBody defines body for PostDeploymentsIssue for application/json ContentType.
type PostDeploymentsIssueJSONRequestBody = IssueDeployedRequest

// PostEnvironmentJSONRequestBody defines body for PostEnvironment for application/json ContentType.
type PostEnvironmentJSONRequestBody = EnvironmentRequest

// PostEnvironmentInformationJSONRequestBody defines body for PostEnvironmentInformation for application/json ContentType.
type PostEnvironmentInformationJSONRequestBody = EnvironmentInfoRequest

// PutEnvironmentIdJSONRequestBody defines body for PutEnvironmentId for application/json ContentType.
type PutEnvironmentIdJSONRequestBody = EnvironmentRequest

// PostEnvironmentsSearchJSONRequestBody defines body for PostEnvironmentsSearch for application/json ContentType.
type PostEnvironmentsSearchJSONRequestBody = EnvironmentFilter

// PostEnvironmentsSearchPaginatedJSONRequestBody defines body for PostEnvironmentsSearchPaginated for application/json ContentType.
type PostEnvironmentsSearchPaginatedJSONRequestBody = EnvironmentFilter

// PostStatusJSONRequestBody defines body for PostStatus for application/json ContentType.
type PostStatusJSONRequestBody = EnvironmentStatus

// PutStatusChangeJSONRequestBody defines body for PutStatusChange for application/json ContentType.
type PutStatusChangeJSONRequestBody = EnvironmentStatusChangeRequest

// PostStatusChangesJSONRequestBody defines body for PostStatusChanges for application/json ContentType.
type PostStatusChangesJSONRequestBody = ScopedStatusChangeRequest

// PutStatusChangesJSONRequestBody defines body for PutStatusChanges for application/json ContentType.
type PutStatusChangesJSONRequestBody = ScopedStatusChangeRequest

// PutStatusIdJSONRequestBody defines body for PutStatusId for application/json ContentType.
type PutStatusIdJSONRequestBody = EnvironmentStatus

// PostVersionJSONRequestBody defines body for PostVersion for application/json ContentType.
type PostVersionJSONRequestBody = VersionInfoRequest

// PostWatcherUserJSONRequestBody defines body for PostWatcherUser for application/json ContentType.
type PostWatcherUserJSONRequestBody = EnvironmentWatcher

// PutWatcherUserJSONRequestBody defines body for PutWatcherUser for application/json ContentType.
type PutWatcherUserJSONRequestBody = EnvironmentWatcher

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApplicationWithBody request with any body
	PostApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplication(ctx context.Context, body PostApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplicationId request
	DeleteApplicationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationId request
	GetApplicationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApplicationIdWithBody request with any body
	PutApplicationIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApplicationId(ctx context.Context, id int32, body PutApplicationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplications request
	GetApplications(ctx context.Context, params *GetApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategories request
	GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCategoryWithBody request with any body
	PostCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCategory(ctx context.Context, body PostCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request
	Delete(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategoryId request
	GetCategoryId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCategoryIdWithBody request with any body
	PutCategoryIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCategoryId(ctx context.Context, id int32, body PutCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomfieldEnvironmentSelectable request
	GetCustomfieldEnvironmentSelectable(ctx context.Context, params *GetCustomfieldEnvironmentSelectableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomfieldEnvironmentSelected request
	GetCustomfieldEnvironmentSelected(ctx context.Context, params *GetCustomfieldEnvironmentSelectedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeployment request
	GetDeployment(ctx context.Context, params *GetDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDeploymentWithBody request with any body
	PutDeploymentWithBody(ctx context.Context, params *PutDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDeployment(ctx context.Context, params *PutDeploymentParams, body PutDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeploymentId request
	DeleteDeploymentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentId request
	GetDeploymentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeployments request
	GetDeployments(ctx context.Context, params *GetDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeploymentsIssueWithBody request with any body
	PostDeploymentsIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeploymentsIssue(ctx context.Context, body PostDeploymentsIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEnvironmentWithBody request with any body
	PostEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnvironment(ctx context.Context, body PostEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEnvironmentInformationWithBody request with any body
	PostEnvironmentInformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnvironmentInformation(ctx context.Context, body PostEnvironmentInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironmentId request
	DeleteEnvironmentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentId request
	GetEnvironmentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutEnvironmentIdWithBody request with any body
	PutEnvironmentIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutEnvironmentId(ctx context.Context, id int32, body PutEnvironmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentsSearch request
	GetEnvironmentsSearch(ctx context.Context, params *GetEnvironmentsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEnvironmentsSearchWithBody request with any body
	PostEnvironmentsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnvironmentsSearch(ctx context.Context, body PostEnvironmentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentsSearchPaginated request
	GetEnvironmentsSearchPaginated(ctx context.Context, params *GetEnvironmentsSearchPaginatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEnvironmentsSearchPaginatedWithBody request with any body
	PostEnvironmentsSearchPaginatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnvironmentsSearchPaginated(ctx context.Context, body PostEnvironmentsSearchPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatusWithBody request with any body
	PostStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatus(ctx context.Context, body PostStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChange request
	GetStatusChange(ctx context.Context, params *GetStatusChangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStatusChangeWithBody request with any body
	PutStatusChangeWithBody(ctx context.Context, params *PutStatusChangeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStatusChange(ctx context.Context, params *PutStatusChangeParams, body PutStatusChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusChanges request
	GetStatusChanges(ctx context.Context, params *GetStatusChangesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatusChangesWithBody request with any body
	PostStatusChangesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatusChanges(ctx context.Context, body PostStatusChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStatusChangesWithBody request with any body
	PutStatusChangesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStatusChanges(ctx context.Context, body PutStatusChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatusId request
	DeleteStatusId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusId request
	GetStatusId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStatusIdWithBody request with any body
	PutStatusIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStatusId(ctx context.Context, id int32, body PutStatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuses request
	GetStatuses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVersionWithBody request with any body
	PostVersionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVersion(ctx context.Context, body PostVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWatcherStatistics request
	GetWatcherStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWatcherUser request
	DeleteWatcherUser(ctx context.Context, params *DeleteWatcherUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWatcherUser request
	GetWatcherUser(ctx context.Context, params *GetWatcherUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWatcherUserWithBody request with any body
	PostWatcherUserWithBody(ctx context.Context, params *PostWatcherUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWatcherUser(ctx context.Context, params *PostWatcherUserParams, body PostWatcherUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWatcherUserWithBody request with any body
	PutWatcherUserWithBody(ctx context.Context, params *PutWatcherUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWatcherUser(ctx context.Context, params *PutWatcherUserParams, body PutWatcherUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplication(ctx context.Context, body PostApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplicationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApplicationIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApplicationIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApplicationId(ctx context.Context, id int32, body PutApplicationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApplicationIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplications(ctx context.Context, params *GetApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCategoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCategory(ctx context.Context, body PostCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCategoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategoryId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoryIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCategoryIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCategoryIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCategoryId(ctx context.Context, id int32, body PutCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCategoryIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomfieldEnvironmentSelectable(ctx context.Context, params *GetCustomfieldEnvironmentSelectableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomfieldEnvironmentSelectableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomfieldEnvironmentSelected(ctx context.Context, params *GetCustomfieldEnvironmentSelectedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomfieldEnvironmentSelectedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeployment(ctx context.Context, params *GetDeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDeploymentWithBody(ctx context.Context, params *PutDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeploymentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDeployment(ctx context.Context, params *PutDeploymentParams, body PutDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeploymentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeploymentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeploymentIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeployments(ctx context.Context, params *GetDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeploymentsIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeploymentsIssueRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeploymentsIssue(ctx context.Context, body PostDeploymentsIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeploymentsIssueRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironment(ctx context.Context, body PostEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentInformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentInformationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentInformation(ctx context.Context, body PostEnvironmentInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentInformationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironmentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEnvironmentIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEnvironmentIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutEnvironmentId(ctx context.Context, id int32, body PutEnvironmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutEnvironmentIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentsSearch(ctx context.Context, params *GetEnvironmentsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentsSearch(ctx context.Context, body PostEnvironmentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentsSearchPaginated(ctx context.Context, params *GetEnvironmentsSearchPaginatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentsSearchPaginatedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentsSearchPaginatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentsSearchPaginatedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentsSearchPaginated(ctx context.Context, body PostEnvironmentsSearchPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentsSearchPaginatedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatus(ctx context.Context, body PostStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChange(ctx context.Context, params *GetStatusChangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChangeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatusChangeWithBody(ctx context.Context, params *PutStatusChangeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatusChangeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatusChange(ctx context.Context, params *PutStatusChangeParams, body PutStatusChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatusChangeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusChanges(ctx context.Context, params *GetStatusChangesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusChangesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatusChangesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatusChangesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatusChanges(ctx context.Context, body PostStatusChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatusChangesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatusChangesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatusChangesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatusChanges(ctx context.Context, body PutStatusChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatusChangesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatusId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatusIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatusIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatusIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatusId(ctx context.Context, id int32, body PutStatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatusIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVersionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVersionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVersion(ctx context.Context, body PostVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVersionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWatcherStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWatcherStatisticsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWatcherUser(ctx context.Context, params *DeleteWatcherUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWatcherUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWatcherUser(ctx context.Context, params *GetWatcherUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWatcherUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWatcherUserWithBody(ctx context.Context, params *PostWatcherUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWatcherUserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWatcherUser(ctx context.Context, params *PostWatcherUserParams, body PostWatcherUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWatcherUserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWatcherUserWithBody(ctx context.Context, params *PutWatcherUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWatcherUserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWatcherUser(ctx context.Context, params *PutWatcherUserParams, body PutWatcherUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWatcherUserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApplicationRequest calls the generic PostApplication builder with application/json body
func NewPostApplicationRequest(server string, body PostApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApplicationRequestWithBody generates requests for PostApplication with any type of body
func NewPostApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationIdRequest generates requests for DeleteApplicationId
func NewDeleteApplicationIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationIdRequest generates requests for GetApplicationId
func NewGetApplicationIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApplicationIdRequest calls the generic PutApplicationId builder with application/json body
func NewPutApplicationIdRequest(server string, id int32, body PutApplicationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApplicationIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApplicationIdRequestWithBody generates requests for PutApplicationId with any type of body
func NewPutApplicationIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApplicationsRequest generates requests for GetApplications
func NewGetApplicationsRequest(server string, params *GetApplicationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCategoryRequest calls the generic PostCategory builder with application/json body
func NewPostCategoryRequest(server string, body PostCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCategoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCategoryRequestWithBody generates requests for PostCategory with any type of body
func NewPostCategoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/category")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRequest generates requests for Delete
func NewDeleteRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/category/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoryIdRequest generates requests for GetCategoryId
func NewGetCategoryIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/category/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCategoryIdRequest calls the generic PutCategoryId builder with application/json body
func NewPutCategoryIdRequest(server string, id int32, body PutCategoryIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCategoryIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutCategoryIdRequestWithBody generates requests for PutCategoryId with any type of body
func NewPutCategoryIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/category/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomfieldEnvironmentSelectableRequest generates requests for GetCustomfieldEnvironmentSelectable
func NewGetCustomfieldEnvironmentSelectableRequest(server string, params *GetCustomfieldEnvironmentSelectableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customfield/environment/selectable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProjectKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectKey", runtime.ParamLocationQuery, *params.ProjectKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomfieldKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customfieldKey", runtime.ParamLocationQuery, *params.CustomfieldKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomfieldName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customfieldName", runtime.ParamLocationQuery, *params.CustomfieldName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedEnvironmentIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludedEnvironmentIds", runtime.ParamLocationQuery, *params.ExcludedEnvironmentIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedOptionIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludedOptionIds", runtime.ParamLocationQuery, *params.ExcludedOptionIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentName", runtime.ParamLocationQuery, *params.EnvironmentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationName", runtime.ParamLocationQuery, *params.ApplicationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryName", runtime.ParamLocationQuery, *params.CategoryName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryId", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusName", runtime.ParamLocationQuery, *params.StatusName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PermissionSchemeName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permissionSchemeName", runtime.ParamLocationQuery, *params.PermissionSchemeName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PermissionSchemeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permissionSchemeId", runtime.ParamLocationQuery, *params.PermissionSchemeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomfieldEnvironmentSelectedRequest generates requests for GetCustomfieldEnvironmentSelected
func NewGetCustomfieldEnvironmentSelectedRequest(server string, params *GetCustomfieldEnvironmentSelectedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customfield/environment/selected")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IssueKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issueKey", runtime.ParamLocationQuery, *params.IssueKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomfieldKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customfieldKey", runtime.ParamLocationQuery, *params.CustomfieldKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomfieldName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customfieldName", runtime.ParamLocationQuery, *params.CustomfieldName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentRequest generates requests for GetDeployment
func NewGetDeploymentRequest(server string, params *GetDeploymentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTime", runtime.ParamLocationQuery, *params.DateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Time != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time", runtime.ParamLocationQuery, *params.Time); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDeploymentRequest calls the generic PutDeployment builder with application/json body
func NewPutDeploymentRequest(server string, params *PutDeploymentParams, body PutDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDeploymentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutDeploymentRequestWithBody generates requests for PutDeployment with any type of body
func NewPutDeploymentRequestWithBody(server string, params *PutDeploymentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTime", runtime.ParamLocationQuery, *params.DateTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Time != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time", runtime.ParamLocationQuery, *params.Time); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeploymentIdRequest generates requests for DeleteDeploymentId
func NewDeleteDeploymentIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentIdRequest generates requests for GetDeploymentId
func NewGetDeploymentIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentsRequest generates requests for GetDeployments
func NewGetDeploymentsRequest(server string, params *GetDeploymentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxResults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResults", runtime.ParamLocationQuery, *params.MaxResults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeploymentsIssueRequest calls the generic PostDeploymentsIssue builder with application/json body
func NewPostDeploymentsIssueRequest(server string, body PostDeploymentsIssueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeploymentsIssueRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeploymentsIssueRequestWithBody generates requests for PostDeploymentsIssue with any type of body
func NewPostDeploymentsIssueRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployments/issue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, params *GetEnvironmentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEnvironmentRequest calls the generic PostEnvironment builder with application/json body
func NewPostEnvironmentRequest(server string, body PostEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnvironmentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEnvironmentRequestWithBody generates requests for PostEnvironment with any type of body
func NewPostEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostEnvironmentInformationRequest calls the generic PostEnvironmentInformation builder with application/json body
func NewPostEnvironmentInformationRequest(server string, body PostEnvironmentInformationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnvironmentInformationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEnvironmentInformationRequestWithBody generates requests for PostEnvironmentInformation with any type of body
func NewPostEnvironmentInformationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environment/information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentIdRequest generates requests for DeleteEnvironmentId
func NewDeleteEnvironmentIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentIdRequest generates requests for GetEnvironmentId
func NewGetEnvironmentIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutEnvironmentIdRequest calls the generic PutEnvironmentId builder with application/json body
func NewPutEnvironmentIdRequest(server string, id int32, body PutEnvironmentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutEnvironmentIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutEnvironmentIdRequestWithBody generates requests for PutEnvironmentId with any type of body
func NewPutEnvironmentIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentsSearchRequest generates requests for GetEnvironmentsSearch
func NewGetEnvironmentsSearchRequest(server string, params *GetEnvironmentsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApplicationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationName", runtime.ParamLocationQuery, *params.ApplicationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryName", runtime.ParamLocationQuery, *params.CategoryName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryId", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusName", runtime.ParamLocationQuery, *params.StatusName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PermissionSchemeName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permissionSchemeName", runtime.ParamLocationQuery, *params.PermissionSchemeName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PermissionSchemeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permissionSchemeId", runtime.ParamLocationQuery, *params.PermissionSchemeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEnvironmentsSearchRequest calls the generic PostEnvironmentsSearch builder with application/json body
func NewPostEnvironmentsSearchRequest(server string, body PostEnvironmentsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnvironmentsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEnvironmentsSearchRequestWithBody generates requests for PostEnvironmentsSearch with any type of body
func NewPostEnvironmentsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentsSearchPaginatedRequest generates requests for GetEnvironmentsSearchPaginated
func NewGetEnvironmentsSearchPaginatedRequest(server string, params *GetEnvironmentsSearchPaginatedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/search/paginated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentName", runtime.ParamLocationQuery, *params.EnvironmentName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationName", runtime.ParamLocationQuery, *params.ApplicationName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplicationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applicationId", runtime.ParamLocationQuery, *params.ApplicationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryName", runtime.ParamLocationQuery, *params.CategoryName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CategoryId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryId", runtime.ParamLocationQuery, *params.CategoryId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusName", runtime.ParamLocationQuery, *params.StatusName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statusId", runtime.ParamLocationQuery, *params.StatusId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PermissionSchemeName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permissionSchemeName", runtime.ParamLocationQuery, *params.PermissionSchemeName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PermissionSchemeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permissionSchemeId", runtime.ParamLocationQuery, *params.PermissionSchemeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PanelSchemeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "panelSchemeId", runtime.ParamLocationQuery, *params.PanelSchemeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TierRelation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tierRelation", runtime.ParamLocationQuery, *params.TierRelation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEnvironmentsSearchPaginatedRequest calls the generic PostEnvironmentsSearchPaginated builder with application/json body
func NewPostEnvironmentsSearchPaginatedRequest(server string, body PostEnvironmentsSearchPaginatedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnvironmentsSearchPaginatedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEnvironmentsSearchPaginatedRequestWithBody generates requests for PostEnvironmentsSearchPaginated with any type of body
func NewPostEnvironmentsSearchPaginatedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/search/paginated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostStatusRequest calls the generic PostStatus builder with application/json body
func NewPostStatusRequest(server string, body PostStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStatusRequestWithBody generates requests for PostStatus with any type of body
func NewPostStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusChangeRequest generates requests for GetStatusChange
func NewGetStatusChangeRequest(server string, params *GetStatusChangeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status-change")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutStatusChangeRequest calls the generic PutStatusChange builder with application/json body
func NewPutStatusChangeRequest(server string, params *PutStatusChangeParams, body PutStatusChangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStatusChangeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutStatusChangeRequestWithBody generates requests for PutStatusChange with any type of body
func NewPutStatusChangeRequestWithBody(server string, params *PutStatusChangeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status-change")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusChangesRequest generates requests for GetStatusChanges
func NewGetStatusChangesRequest(server string, params *GetStatusChangesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status-changes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Application != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, *params.Application); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxResult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxResult", runtime.ParamLocationQuery, *params.MaxResult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStatusChangesRequest calls the generic PostStatusChanges builder with application/json body
func NewPostStatusChangesRequest(server string, body PostStatusChangesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStatusChangesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStatusChangesRequestWithBody generates requests for PostStatusChanges with any type of body
func NewPostStatusChangesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status-changes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutStatusChangesRequest calls the generic PutStatusChanges builder with application/json body
func NewPutStatusChangesRequest(server string, body PutStatusChangesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStatusChangesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutStatusChangesRequestWithBody generates requests for PutStatusChanges with any type of body
func NewPutStatusChangesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status-changes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatusIdRequest generates requests for DeleteStatusId
func NewDeleteStatusIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusIdRequest generates requests for GetStatusId
func NewGetStatusIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutStatusIdRequest calls the generic PutStatusId builder with application/json body
func NewPutStatusIdRequest(server string, id int32, body PutStatusIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStatusIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutStatusIdRequestWithBody generates requests for PutStatusId with any type of body
func NewPutStatusIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusesRequest generates requests for GetStatuses
func NewGetStatusesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVersionRequest calls the generic PostVersion builder with application/json body
func NewPostVersionRequest(server string, body PostVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVersionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVersionRequestWithBody generates requests for PostVersion with any type of body
func NewPostVersionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWatcherStatisticsRequest generates requests for GetWatcherStatistics
func NewGetWatcherStatisticsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/watcher/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWatcherUserRequest generates requests for DeleteWatcherUser
func NewDeleteWatcherUserRequest(server string, params *DeleteWatcherUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/watcher/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UserName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, *params.UserName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userKey", runtime.ParamLocationQuery, *params.UserKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWatcherUserRequest generates requests for GetWatcherUser
func NewGetWatcherUserRequest(server string, params *GetWatcherUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/watcher/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UserName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, *params.UserName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userKey", runtime.ParamLocationQuery, *params.UserKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWatcherUserRequest calls the generic PostWatcherUser builder with application/json body
func NewPostWatcherUserRequest(server string, params *PostWatcherUserParams, body PostWatcherUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWatcherUserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostWatcherUserRequestWithBody generates requests for PostWatcherUser with any type of body
func NewPostWatcherUserRequestWithBody(server string, params *PostWatcherUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/watcher/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UserName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, *params.UserName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userKey", runtime.ParamLocationQuery, *params.UserKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutWatcherUserRequest calls the generic PutWatcherUser builder with application/json body
func NewPutWatcherUserRequest(server string, params *PutWatcherUserParams, body PutWatcherUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWatcherUserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutWatcherUserRequestWithBody generates requests for PutWatcherUser with any type of body
func NewPutWatcherUserRequestWithBody(server string, params *PutWatcherUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/watcher/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UserName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, *params.UserName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userKey", runtime.ParamLocationQuery, *params.UserKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApplicationWithBodyWithResponse request with any body
	PostApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationResponse, error)

	PostApplicationWithResponse(ctx context.Context, body PostApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationResponse, error)

	// DeleteApplicationIdWithResponse request
	DeleteApplicationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApplicationIdResponse, error)

	// GetApplicationIdWithResponse request
	GetApplicationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApplicationIdResponse, error)

	// PutApplicationIdWithBodyWithResponse request with any body
	PutApplicationIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApplicationIdResponse, error)

	PutApplicationIdWithResponse(ctx context.Context, id int32, body PutApplicationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApplicationIdResponse, error)

	// GetApplicationsWithResponse request
	GetApplicationsWithResponse(ctx context.Context, params *GetApplicationsParams, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error)

	// GetCategoriesWithResponse request
	GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error)

	// PostCategoryWithBodyWithResponse request with any body
	PostCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCategoryResponse, error)

	PostCategoryWithResponse(ctx context.Context, body PostCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCategoryResponse, error)

	// DeleteWithResponse request
	DeleteWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// GetCategoryIdWithResponse request
	GetCategoryIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetCategoryIdResponse, error)

	// PutCategoryIdWithBodyWithResponse request with any body
	PutCategoryIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCategoryIdResponse, error)

	PutCategoryIdWithResponse(ctx context.Context, id int32, body PutCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCategoryIdResponse, error)

	// GetCustomfieldEnvironmentSelectableWithResponse request
	GetCustomfieldEnvironmentSelectableWithResponse(ctx context.Context, params *GetCustomfieldEnvironmentSelectableParams, reqEditors ...RequestEditorFn) (*GetCustomfieldEnvironmentSelectableResponse, error)

	// GetCustomfieldEnvironmentSelectedWithResponse request
	GetCustomfieldEnvironmentSelectedWithResponse(ctx context.Context, params *GetCustomfieldEnvironmentSelectedParams, reqEditors ...RequestEditorFn) (*GetCustomfieldEnvironmentSelectedResponse, error)

	// GetDeploymentWithResponse request
	GetDeploymentWithResponse(ctx context.Context, params *GetDeploymentParams, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error)

	// PutDeploymentWithBodyWithResponse request with any body
	PutDeploymentWithBodyWithResponse(ctx context.Context, params *PutDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeploymentResponse, error)

	PutDeploymentWithResponse(ctx context.Context, params *PutDeploymentParams, body PutDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeploymentResponse, error)

	// DeleteDeploymentIdWithResponse request
	DeleteDeploymentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteDeploymentIdResponse, error)

	// GetDeploymentIdWithResponse request
	GetDeploymentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetDeploymentIdResponse, error)

	// GetDeploymentsWithResponse request
	GetDeploymentsWithResponse(ctx context.Context, params *GetDeploymentsParams, reqEditors ...RequestEditorFn) (*GetDeploymentsResponse, error)

	// PostDeploymentsIssueWithBodyWithResponse request with any body
	PostDeploymentsIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeploymentsIssueResponse, error)

	PostDeploymentsIssueWithResponse(ctx context.Context, body PostDeploymentsIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeploymentsIssueResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// PostEnvironmentWithBodyWithResponse request with any body
	PostEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentResponse, error)

	PostEnvironmentWithResponse(ctx context.Context, body PostEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentResponse, error)

	// PostEnvironmentInformationWithBodyWithResponse request with any body
	PostEnvironmentInformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentInformationResponse, error)

	PostEnvironmentInformationWithResponse(ctx context.Context, body PostEnvironmentInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentInformationResponse, error)

	// DeleteEnvironmentIdWithResponse request
	DeleteEnvironmentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteEnvironmentIdResponse, error)

	// GetEnvironmentIdWithResponse request
	GetEnvironmentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetEnvironmentIdResponse, error)

	// PutEnvironmentIdWithBodyWithResponse request with any body
	PutEnvironmentIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEnvironmentIdResponse, error)

	PutEnvironmentIdWithResponse(ctx context.Context, id int32, body PutEnvironmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEnvironmentIdResponse, error)

	// GetEnvironmentsSearchWithResponse request
	GetEnvironmentsSearchWithResponse(ctx context.Context, params *GetEnvironmentsSearchParams, reqEditors ...RequestEditorFn) (*GetEnvironmentsSearchResponse, error)

	// PostEnvironmentsSearchWithBodyWithResponse request with any body
	PostEnvironmentsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentsSearchResponse, error)

	PostEnvironmentsSearchWithResponse(ctx context.Context, body PostEnvironmentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsSearchResponse, error)

	// GetEnvironmentsSearchPaginatedWithResponse request
	GetEnvironmentsSearchPaginatedWithResponse(ctx context.Context, params *GetEnvironmentsSearchPaginatedParams, reqEditors ...RequestEditorFn) (*GetEnvironmentsSearchPaginatedResponse, error)

	// PostEnvironmentsSearchPaginatedWithBodyWithResponse request with any body
	PostEnvironmentsSearchPaginatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentsSearchPaginatedResponse, error)

	PostEnvironmentsSearchPaginatedWithResponse(ctx context.Context, body PostEnvironmentsSearchPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsSearchPaginatedResponse, error)

	// PostStatusWithBodyWithResponse request with any body
	PostStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatusResponse, error)

	PostStatusWithResponse(ctx context.Context, body PostStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatusResponse, error)

	// GetStatusChangeWithResponse request
	GetStatusChangeWithResponse(ctx context.Context, params *GetStatusChangeParams, reqEditors ...RequestEditorFn) (*GetStatusChangeResponse, error)

	// PutStatusChangeWithBodyWithResponse request with any body
	PutStatusChangeWithBodyWithResponse(ctx context.Context, params *PutStatusChangeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatusChangeResponse, error)

	PutStatusChangeWithResponse(ctx context.Context, params *PutStatusChangeParams, body PutStatusChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatusChangeResponse, error)

	// GetStatusChangesWithResponse request
	GetStatusChangesWithResponse(ctx context.Context, params *GetStatusChangesParams, reqEditors ...RequestEditorFn) (*GetStatusChangesResponse, error)

	// PostStatusChangesWithBodyWithResponse request with any body
	PostStatusChangesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatusChangesResponse, error)

	PostStatusChangesWithResponse(ctx context.Context, body PostStatusChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatusChangesResponse, error)

	// PutStatusChangesWithBodyWithResponse request with any body
	PutStatusChangesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatusChangesResponse, error)

	PutStatusChangesWithResponse(ctx context.Context, body PutStatusChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatusChangesResponse, error)

	// DeleteStatusIdWithResponse request
	DeleteStatusIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteStatusIdResponse, error)

	// GetStatusIdWithResponse request
	GetStatusIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetStatusIdResponse, error)

	// PutStatusIdWithBodyWithResponse request with any body
	PutStatusIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatusIdResponse, error)

	PutStatusIdWithResponse(ctx context.Context, id int32, body PutStatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatusIdResponse, error)

	// GetStatusesWithResponse request
	GetStatusesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusesResponse, error)

	// PostVersionWithBodyWithResponse request with any body
	PostVersionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVersionResponse, error)

	PostVersionWithResponse(ctx context.Context, body PostVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVersionResponse, error)

	// GetWatcherStatisticsWithResponse request
	GetWatcherStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWatcherStatisticsResponse, error)

	// DeleteWatcherUserWithResponse request
	DeleteWatcherUserWithResponse(ctx context.Context, params *DeleteWatcherUserParams, reqEditors ...RequestEditorFn) (*DeleteWatcherUserResponse, error)

	// GetWatcherUserWithResponse request
	GetWatcherUserWithResponse(ctx context.Context, params *GetWatcherUserParams, reqEditors ...RequestEditorFn) (*GetWatcherUserResponse, error)

	// PostWatcherUserWithBodyWithResponse request with any body
	PostWatcherUserWithBodyWithResponse(ctx context.Context, params *PostWatcherUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWatcherUserResponse, error)

	PostWatcherUserWithResponse(ctx context.Context, params *PostWatcherUserParams, body PostWatcherUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWatcherUserResponse, error)

	// PutWatcherUserWithBodyWithResponse request with any body
	PutWatcherUserWithBodyWithResponse(ctx context.Context, params *PutWatcherUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWatcherUserResponse, error)

	PutWatcherUserWithResponse(ctx context.Context, params *PutWatcherUserParams, body PutWatcherUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWatcherUserResponse, error)
}

type PostApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResponse
	JSON400      *N400
}

// Status returns HTTPResponse.Status
func (r PostApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResponse
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r GetApplicationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApplicationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationResponse
	JSON400      *N400
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r PutApplicationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApplicationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApplicationResponse
}

// Status returns HTTPResponse.Status
func (r GetApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentCategory
}

// Status returns HTTPResponse.Status
func (r GetCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentCategory
	JSON400      *N400
}

// Status returns HTTPResponse.Status
func (r PostCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentCategory
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentCategory
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r GetCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCategoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentCategory
	JSON400      *N400
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r PutCategoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCategoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomfieldEnvironmentSelectableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OptionReferenceResourceResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomfieldEnvironmentSelectableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomfieldEnvironmentSelectableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomfieldEnvironmentSelectedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentReferenceResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomfieldEnvironmentSelectedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomfieldEnvironmentSelectedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentResponse
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r GetDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentResponse
	JSON400      *N400
}

// Status returns HTTPResponse.Status
func (r PutDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeploymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentResponse
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r DeleteDeploymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeploymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentResponse
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r GetDeploymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeploymentResponse
}

// Status returns HTTPResponse.Status
func (r GetDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeploymentsIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDeploymentsIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeploymentsIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r PostEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEnvironmentInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentInfoResponse
	JSON400      *N400
}

// Status returns HTTPResponse.Status
func (r PostEnvironmentInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnvironmentInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutEnvironmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r PutEnvironmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutEnvironmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEnvironmentsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r PostEnvironmentsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnvironmentsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentsSearchPaginatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentsSearchPaginatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentsSearchPaginatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEnvironmentsSearchPaginatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEnvironmentResponse
}

// Status returns HTTPResponse.Status
func (r PostEnvironmentsSearchPaginatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnvironmentsSearchPaginatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentStatus
	JSON400      *N400
}

// Status returns HTTPResponse.Status
func (r PostStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusChange
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r GetStatusChangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStatusChangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusChange
	JSON400      *N400
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r PutStatusChangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStatusChangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StatusChange
}

// Status returns HTTPResponse.Status
func (r GetStatusChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatusChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusChangesResponse
	JSON400      *N400
}

// Status returns HTTPResponse.Status
func (r PostStatusChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatusChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStatusChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusChangesResponse
	JSON400      *N400
}

// Status returns HTTPResponse.Status
func (r PutStatusChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStatusChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r DeleteStatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentStatus
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r GetStatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentStatus
	JSON400      *N400
	JSON404      *N404
}

// Status returns HTTPResponse.Status
func (r PutStatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentStatus
}

// Status returns HTTPResponse.Status
func (r GetStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionInfoResponse
	JSON400      *N400
}

// Status returns HTTPResponse.Status
func (r PostVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWatcherStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WatcherStatistics
}

// Status returns HTTPResponse.Status
func (r GetWatcherStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWatcherStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWatcherUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWatcherUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWatcherUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWatcherUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentWatcher
}

// Status returns HTTPResponse.Status
func (r GetWatcherUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWatcherUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWatcherUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentWatcher
}

// Status returns HTTPResponse.Status
func (r PostWatcherUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWatcherUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWatcherUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentWatcher
}

// Status returns HTTPResponse.Status
func (r PutWatcherUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWatcherUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApplicationWithBodyWithResponse request with arbitrary body returning *PostApplicationResponse
func (c *ClientWithResponses) PostApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationResponse, error) {
	rsp, err := c.PostApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationWithResponse(ctx context.Context, body PostApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationResponse, error) {
	rsp, err := c.PostApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationResponse(rsp)
}

// DeleteApplicationIdWithResponse request returning *DeleteApplicationIdResponse
func (c *ClientWithResponses) DeleteApplicationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteApplicationIdResponse, error) {
	rsp, err := c.DeleteApplicationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationIdResponse(rsp)
}

// GetApplicationIdWithResponse request returning *GetApplicationIdResponse
func (c *ClientWithResponses) GetApplicationIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApplicationIdResponse, error) {
	rsp, err := c.GetApplicationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationIdResponse(rsp)
}

// PutApplicationIdWithBodyWithResponse request with arbitrary body returning *PutApplicationIdResponse
func (c *ClientWithResponses) PutApplicationIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApplicationIdResponse, error) {
	rsp, err := c.PutApplicationIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApplicationIdResponse(rsp)
}

func (c *ClientWithResponses) PutApplicationIdWithResponse(ctx context.Context, id int32, body PutApplicationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApplicationIdResponse, error) {
	rsp, err := c.PutApplicationId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApplicationIdResponse(rsp)
}

// GetApplicationsWithResponse request returning *GetApplicationsResponse
func (c *ClientWithResponses) GetApplicationsWithResponse(ctx context.Context, params *GetApplicationsParams, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error) {
	rsp, err := c.GetApplications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsResponse(rsp)
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesResponse(rsp)
}

// PostCategoryWithBodyWithResponse request with arbitrary body returning *PostCategoryResponse
func (c *ClientWithResponses) PostCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCategoryResponse, error) {
	rsp, err := c.PostCategoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCategoryResponse(rsp)
}

func (c *ClientWithResponses) PostCategoryWithResponse(ctx context.Context, body PostCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCategoryResponse, error) {
	rsp, err := c.PostCategory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCategoryResponse(rsp)
}

// DeleteWithResponse request returning *DeleteResponse
func (c *ClientWithResponses) DeleteWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResponse(rsp)
}

// GetCategoryIdWithResponse request returning *GetCategoryIdResponse
func (c *ClientWithResponses) GetCategoryIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetCategoryIdResponse, error) {
	rsp, err := c.GetCategoryId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryIdResponse(rsp)
}

// PutCategoryIdWithBodyWithResponse request with arbitrary body returning *PutCategoryIdResponse
func (c *ClientWithResponses) PutCategoryIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCategoryIdResponse, error) {
	rsp, err := c.PutCategoryIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCategoryIdResponse(rsp)
}

func (c *ClientWithResponses) PutCategoryIdWithResponse(ctx context.Context, id int32, body PutCategoryIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCategoryIdResponse, error) {
	rsp, err := c.PutCategoryId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCategoryIdResponse(rsp)
}

// GetCustomfieldEnvironmentSelectableWithResponse request returning *GetCustomfieldEnvironmentSelectableResponse
func (c *ClientWithResponses) GetCustomfieldEnvironmentSelectableWithResponse(ctx context.Context, params *GetCustomfieldEnvironmentSelectableParams, reqEditors ...RequestEditorFn) (*GetCustomfieldEnvironmentSelectableResponse, error) {
	rsp, err := c.GetCustomfieldEnvironmentSelectable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomfieldEnvironmentSelectableResponse(rsp)
}

// GetCustomfieldEnvironmentSelectedWithResponse request returning *GetCustomfieldEnvironmentSelectedResponse
func (c *ClientWithResponses) GetCustomfieldEnvironmentSelectedWithResponse(ctx context.Context, params *GetCustomfieldEnvironmentSelectedParams, reqEditors ...RequestEditorFn) (*GetCustomfieldEnvironmentSelectedResponse, error) {
	rsp, err := c.GetCustomfieldEnvironmentSelected(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomfieldEnvironmentSelectedResponse(rsp)
}

// GetDeploymentWithResponse request returning *GetDeploymentResponse
func (c *ClientWithResponses) GetDeploymentWithResponse(ctx context.Context, params *GetDeploymentParams, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error) {
	rsp, err := c.GetDeployment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentResponse(rsp)
}

// PutDeploymentWithBodyWithResponse request with arbitrary body returning *PutDeploymentResponse
func (c *ClientWithResponses) PutDeploymentWithBodyWithResponse(ctx context.Context, params *PutDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeploymentResponse, error) {
	rsp, err := c.PutDeploymentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeploymentResponse(rsp)
}

func (c *ClientWithResponses) PutDeploymentWithResponse(ctx context.Context, params *PutDeploymentParams, body PutDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeploymentResponse, error) {
	rsp, err := c.PutDeployment(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeploymentResponse(rsp)
}

// DeleteDeploymentIdWithResponse request returning *DeleteDeploymentIdResponse
func (c *ClientWithResponses) DeleteDeploymentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteDeploymentIdResponse, error) {
	rsp, err := c.DeleteDeploymentId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeploymentIdResponse(rsp)
}

// GetDeploymentIdWithResponse request returning *GetDeploymentIdResponse
func (c *ClientWithResponses) GetDeploymentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetDeploymentIdResponse, error) {
	rsp, err := c.GetDeploymentId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentIdResponse(rsp)
}

// GetDeploymentsWithResponse request returning *GetDeploymentsResponse
func (c *ClientWithResponses) GetDeploymentsWithResponse(ctx context.Context, params *GetDeploymentsParams, reqEditors ...RequestEditorFn) (*GetDeploymentsResponse, error) {
	rsp, err := c.GetDeployments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentsResponse(rsp)
}

// PostDeploymentsIssueWithBodyWithResponse request with arbitrary body returning *PostDeploymentsIssueResponse
func (c *ClientWithResponses) PostDeploymentsIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeploymentsIssueResponse, error) {
	rsp, err := c.PostDeploymentsIssueWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeploymentsIssueResponse(rsp)
}

func (c *ClientWithResponses) PostDeploymentsIssueWithResponse(ctx context.Context, body PostDeploymentsIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeploymentsIssueResponse, error) {
	rsp, err := c.PostDeploymentsIssue(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeploymentsIssueResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, params *GetEnvironmentParams, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// PostEnvironmentWithBodyWithResponse request with arbitrary body returning *PostEnvironmentResponse
func (c *ClientWithResponses) PostEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentResponse, error) {
	rsp, err := c.PostEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) PostEnvironmentWithResponse(ctx context.Context, body PostEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentResponse, error) {
	rsp, err := c.PostEnvironment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentResponse(rsp)
}

// PostEnvironmentInformationWithBodyWithResponse request with arbitrary body returning *PostEnvironmentInformationResponse
func (c *ClientWithResponses) PostEnvironmentInformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentInformationResponse, error) {
	rsp, err := c.PostEnvironmentInformationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentInformationResponse(rsp)
}

func (c *ClientWithResponses) PostEnvironmentInformationWithResponse(ctx context.Context, body PostEnvironmentInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentInformationResponse, error) {
	rsp, err := c.PostEnvironmentInformation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentInformationResponse(rsp)
}

// DeleteEnvironmentIdWithResponse request returning *DeleteEnvironmentIdResponse
func (c *ClientWithResponses) DeleteEnvironmentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteEnvironmentIdResponse, error) {
	rsp, err := c.DeleteEnvironmentId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentIdResponse(rsp)
}

// GetEnvironmentIdWithResponse request returning *GetEnvironmentIdResponse
func (c *ClientWithResponses) GetEnvironmentIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetEnvironmentIdResponse, error) {
	rsp, err := c.GetEnvironmentId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentIdResponse(rsp)
}

// PutEnvironmentIdWithBodyWithResponse request with arbitrary body returning *PutEnvironmentIdResponse
func (c *ClientWithResponses) PutEnvironmentIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutEnvironmentIdResponse, error) {
	rsp, err := c.PutEnvironmentIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEnvironmentIdResponse(rsp)
}

func (c *ClientWithResponses) PutEnvironmentIdWithResponse(ctx context.Context, id int32, body PutEnvironmentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutEnvironmentIdResponse, error) {
	rsp, err := c.PutEnvironmentId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutEnvironmentIdResponse(rsp)
}

// GetEnvironmentsSearchWithResponse request returning *GetEnvironmentsSearchResponse
func (c *ClientWithResponses) GetEnvironmentsSearchWithResponse(ctx context.Context, params *GetEnvironmentsSearchParams, reqEditors ...RequestEditorFn) (*GetEnvironmentsSearchResponse, error) {
	rsp, err := c.GetEnvironmentsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentsSearchResponse(rsp)
}

// PostEnvironmentsSearchWithBodyWithResponse request with arbitrary body returning *PostEnvironmentsSearchResponse
func (c *ClientWithResponses) PostEnvironmentsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentsSearchResponse, error) {
	rsp, err := c.PostEnvironmentsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentsSearchResponse(rsp)
}

func (c *ClientWithResponses) PostEnvironmentsSearchWithResponse(ctx context.Context, body PostEnvironmentsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsSearchResponse, error) {
	rsp, err := c.PostEnvironmentsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentsSearchResponse(rsp)
}

// GetEnvironmentsSearchPaginatedWithResponse request returning *GetEnvironmentsSearchPaginatedResponse
func (c *ClientWithResponses) GetEnvironmentsSearchPaginatedWithResponse(ctx context.Context, params *GetEnvironmentsSearchPaginatedParams, reqEditors ...RequestEditorFn) (*GetEnvironmentsSearchPaginatedResponse, error) {
	rsp, err := c.GetEnvironmentsSearchPaginated(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentsSearchPaginatedResponse(rsp)
}

// PostEnvironmentsSearchPaginatedWithBodyWithResponse request with arbitrary body returning *PostEnvironmentsSearchPaginatedResponse
func (c *ClientWithResponses) PostEnvironmentsSearchPaginatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentsSearchPaginatedResponse, error) {
	rsp, err := c.PostEnvironmentsSearchPaginatedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentsSearchPaginatedResponse(rsp)
}

func (c *ClientWithResponses) PostEnvironmentsSearchPaginatedWithResponse(ctx context.Context, body PostEnvironmentsSearchPaginatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsSearchPaginatedResponse, error) {
	rsp, err := c.PostEnvironmentsSearchPaginated(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentsSearchPaginatedResponse(rsp)
}

// PostStatusWithBodyWithResponse request with arbitrary body returning *PostStatusResponse
func (c *ClientWithResponses) PostStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatusResponse, error) {
	rsp, err := c.PostStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatusResponse(rsp)
}

func (c *ClientWithResponses) PostStatusWithResponse(ctx context.Context, body PostStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatusResponse, error) {
	rsp, err := c.PostStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatusResponse(rsp)
}

// GetStatusChangeWithResponse request returning *GetStatusChangeResponse
func (c *ClientWithResponses) GetStatusChangeWithResponse(ctx context.Context, params *GetStatusChangeParams, reqEditors ...RequestEditorFn) (*GetStatusChangeResponse, error) {
	rsp, err := c.GetStatusChange(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChangeResponse(rsp)
}

// PutStatusChangeWithBodyWithResponse request with arbitrary body returning *PutStatusChangeResponse
func (c *ClientWithResponses) PutStatusChangeWithBodyWithResponse(ctx context.Context, params *PutStatusChangeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatusChangeResponse, error) {
	rsp, err := c.PutStatusChangeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatusChangeResponse(rsp)
}

func (c *ClientWithResponses) PutStatusChangeWithResponse(ctx context.Context, params *PutStatusChangeParams, body PutStatusChangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatusChangeResponse, error) {
	rsp, err := c.PutStatusChange(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatusChangeResponse(rsp)
}

// GetStatusChangesWithResponse request returning *GetStatusChangesResponse
func (c *ClientWithResponses) GetStatusChangesWithResponse(ctx context.Context, params *GetStatusChangesParams, reqEditors ...RequestEditorFn) (*GetStatusChangesResponse, error) {
	rsp, err := c.GetStatusChanges(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusChangesResponse(rsp)
}

// PostStatusChangesWithBodyWithResponse request with arbitrary body returning *PostStatusChangesResponse
func (c *ClientWithResponses) PostStatusChangesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatusChangesResponse, error) {
	rsp, err := c.PostStatusChangesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatusChangesResponse(rsp)
}

func (c *ClientWithResponses) PostStatusChangesWithResponse(ctx context.Context, body PostStatusChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatusChangesResponse, error) {
	rsp, err := c.PostStatusChanges(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatusChangesResponse(rsp)
}

// PutStatusChangesWithBodyWithResponse request with arbitrary body returning *PutStatusChangesResponse
func (c *ClientWithResponses) PutStatusChangesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatusChangesResponse, error) {
	rsp, err := c.PutStatusChangesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatusChangesResponse(rsp)
}

func (c *ClientWithResponses) PutStatusChangesWithResponse(ctx context.Context, body PutStatusChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatusChangesResponse, error) {
	rsp, err := c.PutStatusChanges(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatusChangesResponse(rsp)
}

// DeleteStatusIdWithResponse request returning *DeleteStatusIdResponse
func (c *ClientWithResponses) DeleteStatusIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteStatusIdResponse, error) {
	rsp, err := c.DeleteStatusId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatusIdResponse(rsp)
}

// GetStatusIdWithResponse request returning *GetStatusIdResponse
func (c *ClientWithResponses) GetStatusIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetStatusIdResponse, error) {
	rsp, err := c.GetStatusId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusIdResponse(rsp)
}

// PutStatusIdWithBodyWithResponse request with arbitrary body returning *PutStatusIdResponse
func (c *ClientWithResponses) PutStatusIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatusIdResponse, error) {
	rsp, err := c.PutStatusIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatusIdResponse(rsp)
}

func (c *ClientWithResponses) PutStatusIdWithResponse(ctx context.Context, id int32, body PutStatusIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatusIdResponse, error) {
	rsp, err := c.PutStatusId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatusIdResponse(rsp)
}

// GetStatusesWithResponse request returning *GetStatusesResponse
func (c *ClientWithResponses) GetStatusesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusesResponse, error) {
	rsp, err := c.GetStatuses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusesResponse(rsp)
}

// PostVersionWithBodyWithResponse request with arbitrary body returning *PostVersionResponse
func (c *ClientWithResponses) PostVersionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVersionResponse, error) {
	rsp, err := c.PostVersionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVersionResponse(rsp)
}

func (c *ClientWithResponses) PostVersionWithResponse(ctx context.Context, body PostVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVersionResponse, error) {
	rsp, err := c.PostVersion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVersionResponse(rsp)
}

// GetWatcherStatisticsWithResponse request returning *GetWatcherStatisticsResponse
func (c *ClientWithResponses) GetWatcherStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWatcherStatisticsResponse, error) {
	rsp, err := c.GetWatcherStatistics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWatcherStatisticsResponse(rsp)
}

// DeleteWatcherUserWithResponse request returning *DeleteWatcherUserResponse
func (c *ClientWithResponses) DeleteWatcherUserWithResponse(ctx context.Context, params *DeleteWatcherUserParams, reqEditors ...RequestEditorFn) (*DeleteWatcherUserResponse, error) {
	rsp, err := c.DeleteWatcherUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWatcherUserResponse(rsp)
}

// GetWatcherUserWithResponse request returning *GetWatcherUserResponse
func (c *ClientWithResponses) GetWatcherUserWithResponse(ctx context.Context, params *GetWatcherUserParams, reqEditors ...RequestEditorFn) (*GetWatcherUserResponse, error) {
	rsp, err := c.GetWatcherUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWatcherUserResponse(rsp)
}

// PostWatcherUserWithBodyWithResponse request with arbitrary body returning *PostWatcherUserResponse
func (c *ClientWithResponses) PostWatcherUserWithBodyWithResponse(ctx context.Context, params *PostWatcherUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWatcherUserResponse, error) {
	rsp, err := c.PostWatcherUserWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWatcherUserResponse(rsp)
}

func (c *ClientWithResponses) PostWatcherUserWithResponse(ctx context.Context, params *PostWatcherUserParams, body PostWatcherUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWatcherUserResponse, error) {
	rsp, err := c.PostWatcherUser(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWatcherUserResponse(rsp)
}

// PutWatcherUserWithBodyWithResponse request with arbitrary body returning *PutWatcherUserResponse
func (c *ClientWithResponses) PutWatcherUserWithBodyWithResponse(ctx context.Context, params *PutWatcherUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWatcherUserResponse, error) {
	rsp, err := c.PutWatcherUserWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWatcherUserResponse(rsp)
}

func (c *ClientWithResponses) PutWatcherUserWithResponse(ctx context.Context, params *PutWatcherUserParams, body PutWatcherUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWatcherUserResponse, error) {
	rsp, err := c.PutWatcherUser(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWatcherUserResponse(rsp)
}

// ParsePostApplicationResponse parses an HTTP response from a PostApplicationWithResponse call
func ParsePostApplicationResponse(rsp *http.Response) (*PostApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationIdResponse parses an HTTP response from a DeleteApplicationIdWithResponse call
func ParseDeleteApplicationIdResponse(rsp *http.Response) (*DeleteApplicationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApplicationIdResponse parses an HTTP response from a GetApplicationIdWithResponse call
func ParseGetApplicationIdResponse(rsp *http.Response) (*GetApplicationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutApplicationIdResponse parses an HTTP response from a PutApplicationIdWithResponse call
func ParsePutApplicationIdResponse(rsp *http.Response) (*PutApplicationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApplicationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApplicationsResponse parses an HTTP response from a GetApplicationsWithResponse call
func ParseGetApplicationsResponse(rsp *http.Response) (*GetApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParseGetCategoriesResponse(rsp *http.Response) (*GetCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCategoryResponse parses an HTTP response from a PostCategoryWithResponse call
func ParsePostCategoryResponse(rsp *http.Response) (*PostCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteResponse parses an HTTP response from a DeleteWithResponse call
func ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCategoryIdResponse parses an HTTP response from a GetCategoryIdWithResponse call
func ParseGetCategoryIdResponse(rsp *http.Response) (*GetCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutCategoryIdResponse parses an HTTP response from a PutCategoryIdWithResponse call
func ParsePutCategoryIdResponse(rsp *http.Response) (*PutCategoryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCategoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentCategory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCustomfieldEnvironmentSelectableResponse parses an HTTP response from a GetCustomfieldEnvironmentSelectableWithResponse call
func ParseGetCustomfieldEnvironmentSelectableResponse(rsp *http.Response) (*GetCustomfieldEnvironmentSelectableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomfieldEnvironmentSelectableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OptionReferenceResourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomfieldEnvironmentSelectedResponse parses an HTTP response from a GetCustomfieldEnvironmentSelectedWithResponse call
func ParseGetCustomfieldEnvironmentSelectedResponse(rsp *http.Response) (*GetCustomfieldEnvironmentSelectedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomfieldEnvironmentSelectedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentReferenceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDeploymentResponse parses an HTTP response from a GetDeploymentWithResponse call
func ParseGetDeploymentResponse(rsp *http.Response) (*GetDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutDeploymentResponse parses an HTTP response from a PutDeploymentWithResponse call
func ParsePutDeploymentResponse(rsp *http.Response) (*PutDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteDeploymentIdResponse parses an HTTP response from a DeleteDeploymentIdWithResponse call
func ParseDeleteDeploymentIdResponse(rsp *http.Response) (*DeleteDeploymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeploymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDeploymentIdResponse parses an HTTP response from a GetDeploymentIdWithResponse call
func ParseGetDeploymentIdResponse(rsp *http.Response) (*GetDeploymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDeploymentsResponse parses an HTTP response from a GetDeploymentsWithResponse call
func ParseGetDeploymentsResponse(rsp *http.Response) (*GetDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDeploymentsIssueResponse parses an HTTP response from a PostDeploymentsIssueWithResponse call
func ParsePostDeploymentsIssueResponse(rsp *http.Response) (*PostDeploymentsIssueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeploymentsIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEnvironmentResponse parses an HTTP response from a PostEnvironmentWithResponse call
func ParsePostEnvironmentResponse(rsp *http.Response) (*PostEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEnvironmentInformationResponse parses an HTTP response from a PostEnvironmentInformationWithResponse call
func ParsePostEnvironmentInformationResponse(rsp *http.Response) (*PostEnvironmentInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnvironmentInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentIdResponse parses an HTTP response from a DeleteEnvironmentIdWithResponse call
func ParseDeleteEnvironmentIdResponse(rsp *http.Response) (*DeleteEnvironmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentIdResponse parses an HTTP response from a GetEnvironmentIdWithResponse call
func ParseGetEnvironmentIdResponse(rsp *http.Response) (*GetEnvironmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutEnvironmentIdResponse parses an HTTP response from a PutEnvironmentIdWithResponse call
func ParsePutEnvironmentIdResponse(rsp *http.Response) (*PutEnvironmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutEnvironmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentsSearchResponse parses an HTTP response from a GetEnvironmentsSearchWithResponse call
func ParseGetEnvironmentsSearchResponse(rsp *http.Response) (*GetEnvironmentsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEnvironmentsSearchResponse parses an HTTP response from a PostEnvironmentsSearchWithResponse call
func ParsePostEnvironmentsSearchResponse(rsp *http.Response) (*PostEnvironmentsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnvironmentsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentsSearchPaginatedResponse parses an HTTP response from a GetEnvironmentsSearchPaginatedWithResponse call
func ParseGetEnvironmentsSearchPaginatedResponse(rsp *http.Response) (*GetEnvironmentsSearchPaginatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentsSearchPaginatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEnvironmentsSearchPaginatedResponse parses an HTTP response from a PostEnvironmentsSearchPaginatedWithResponse call
func ParsePostEnvironmentsSearchPaginatedResponse(rsp *http.Response) (*PostEnvironmentsSearchPaginatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnvironmentsSearchPaginatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStatusResponse parses an HTTP response from a PostStatusWithResponse call
func ParsePostStatusResponse(rsp *http.Response) (*PostStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetStatusChangeResponse parses an HTTP response from a GetStatusChangeWithResponse call
func ParseGetStatusChangeResponse(rsp *http.Response) (*GetStatusChangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusChange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutStatusChangeResponse parses an HTTP response from a PutStatusChangeWithResponse call
func ParsePutStatusChangeResponse(rsp *http.Response) (*PutStatusChangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStatusChangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusChange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStatusChangesResponse parses an HTTP response from a GetStatusChangesWithResponse call
func ParseGetStatusChangesResponse(rsp *http.Response) (*GetStatusChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StatusChange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStatusChangesResponse parses an HTTP response from a PostStatusChangesWithResponse call
func ParsePostStatusChangesResponse(rsp *http.Response) (*PostStatusChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStatusChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusChangesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePutStatusChangesResponse parses an HTTP response from a PutStatusChangesWithResponse call
func ParsePutStatusChangesResponse(rsp *http.Response) (*PutStatusChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStatusChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusChangesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteStatusIdResponse parses an HTTP response from a DeleteStatusIdWithResponse call
func ParseDeleteStatusIdResponse(rsp *http.Response) (*DeleteStatusIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStatusIdResponse parses an HTTP response from a GetStatusIdWithResponse call
func ParseGetStatusIdResponse(rsp *http.Response) (*GetStatusIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutStatusIdResponse parses an HTTP response from a PutStatusIdWithResponse call
func ParsePutStatusIdResponse(rsp *http.Response) (*PutStatusIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStatusesResponse parses an HTTP response from a GetStatusesWithResponse call
func ParseGetStatusesResponse(rsp *http.Response) (*GetStatusesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostVersionResponse parses an HTTP response from a PostVersionWithResponse call
func ParsePostVersionResponse(rsp *http.Response) (*PostVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetWatcherStatisticsResponse parses an HTTP response from a GetWatcherStatisticsWithResponse call
func ParseGetWatcherStatisticsResponse(rsp *http.Response) (*GetWatcherStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWatcherStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WatcherStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteWatcherUserResponse parses an HTTP response from a DeleteWatcherUserWithResponse call
func ParseDeleteWatcherUserResponse(rsp *http.Response) (*DeleteWatcherUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWatcherUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWatcherUserResponse parses an HTTP response from a GetWatcherUserWithResponse call
func ParseGetWatcherUserResponse(rsp *http.Response) (*GetWatcherUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWatcherUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentWatcher
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWatcherUserResponse parses an HTTP response from a PostWatcherUserWithResponse call
func ParsePostWatcherUserResponse(rsp *http.Response) (*PostWatcherUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWatcherUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentWatcher
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutWatcherUserResponse parses an HTTP response from a PutWatcherUserWithResponse call
func ParsePutWatcherUserResponse(rsp *http.Response) (*PutWatcherUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWatcherUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentWatcher
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9aXPjNrJ/BY/7qibZkmxJnlNVqfc8tmbibMZ2WZ6k3kZTKYiEJGZJgAFA29op//dX",
	"OEiC96HDzqzmy1gSATT6Qneju/nVsokfEIwwZ9b4q0URCwhmSH54ORiI/2yCOcJc/AmDwHNtyF2Cj/9g",
	"BIvvmL1CPhR//TdFC2ts/e04mfNY/cqOJ5QSekY8D9litPX4+NizHMRs6gbyi7F1g/4MEePgHjLg4jvo",
	"uU4PUAQZwYCtSOg5YI5AQMmd6yAHuBhE0II5cdZH1mPPejl4uV+QGQmpjcAKMoAJB3OEMFiQEDtHlnhc",
	"zyWWOk0A0TsV3waUBIhyV2HcpghydInuf0GUuQpYvg6QNbbmhHgIYkvCEHhk7SPMTzmn7jzkarTLkc/q",
	"dhUPETPpuSGlcJ2e+YzghbsMKeQajKo5z0uGPfYsF9vEd/HyHAUIOwjbbgtYL6GPnBu0QBRhuxBgHwYB",
	"cq4p+QPZ/MIRE6IH6AcessbDQc9aEOpDbo0tF/PXL614AhdztERUTIGhj1LjLHRGfB9RGyXPM05dvBSP",
	"k5Avye42FEAayeKWZuQuorfyu+qZbqPn9JhtwnCn2PmaooX7kEb25OzqUx7Pjz2Loj9DlyLHGv+maPQl",
	"forMBbnFxCmhUsrgP0KqMpyeZvSTUSGjH0TxIIqbi6LrWL0KeYzloEQKnfdrQ/wSWupfr0zhjDijZz30",
	"YXDfRwGxV30Hitk5DVEsCA2Y/1+oeF2fOO7CLQUr+rktXAzZoURYkabhmgXyiC7H5y/QCzOy8RXMrKt7",
	"jOjMGoOZ9RNZ4ZkFHq1eBvGRVOU2dxfN2QCQM0EfOPdQhsNyZIYhJ/Jh+VvaXNJW3D0CityARvMAdyHt",
	"J/TgMi6A6BXgrTGxS3ZctC+lZJFzwVioNpDZjuOcE4zUzx/cB+RcYOMYcdAChh63xgvoMVQItBj5D7RO",
	"y3COFlkx/eNPr/A5TD64DxqAz4ETo7kODIaw85NL4SXh7kKfmE1GluOs8DxLIy+g6A5hnjz/CdElKhYK",
	"iqBDsLfOE6RgMyty/z50Pecy9OeIlj90brLf15abO0ccul4BS6TMA+g4rpgfetepp/K8N09DnAjy6O3J",
	"u3cv3xYdcY7GxhXOS9PF9Kr/9vVgCAQXAO76CGjZ6JmTD0Yn/cG7/uglGL4eDwbjweCfFStlQIOO72JL",
	"UecKe2ul4AqHpzCdzHCDPAQZAjbEjishXRAKpqE41sFoMBoUAYPwnUsJFlS4qDd1SoAzTZ+tTNJNkvWB",
	"m9mHNRwMB4NR0eb1gMucMSTOZzA8Gh29LDylK1j5Ai/I82Dk88KDYdusvE1edGNFVG+sx2rrmdC9NNCw",
	"f9JvTZa3TN3/BM1g2u9GPOxCmPLGZzlvz7IhR0tC1/Ln6IP+LRLjW9f8SK0MlbMaXOL5Sw2rlrnvaYg3",
	"p1Z2x6UOZ+2ht08pMqiyOQpSVE1BMOVwqezvBke+wQspmF6NRoPh8OXg3au3b2vBqfCiNrZJnrHicQyr",
	"OZ7q7fDdq4JIST1sCJeTYfjmzduTTcjwLVljhDqIImeTEJ9yxQ/6vEifT5LHzvRKeYXeKXqJK1RVPjIo",
	"qFwZgSxZhTeIzhXsUQXrWkXKymYRQOPQFxOcT36Z/Hx1/WlyeWv1rNvJ9Pbi8qPVs6a3px/VX9c3V+ef",
	"z24vri7FGgZq4idyqDHW/eB6XKEpG6lzOaIubCwaxpxTBKm9OlMzEFwkJughgLgkNOa5vssbRnnIYsFQ",
	"04cZobwkxid+uooYpoF5bex2u35VaaAupF432Ert/0S6m99CyM2mj4MWjFEweoo8ZHNCW84SDxO045CH",
	"raPiGUE1N/SlCVLLLNUuWNVRpnZ4zYf5nwIRJv1KTfY6kMoCy4aVusEULXBaOkuNnF0j6rtMnONTMVMh",
	"W5QYjucq+AqM2UAyHdDzFSjxpUfm0FMJG4WGUi5qvvFp2xlWSjyFhmSu316cChv+RQ+8OMUEr30SMvHh",
	"E2HQtcEtgj74hIR7xF58EcZGQ/Muw84m3mOc9YxzOQKuhterbjuaM3p3/s6P3MVNSNGGy1VdTJK2BkLF",
	"5WQtVGXBrE2I0OmwLgA0meeWnCMPqTBnc8ekOzM4hZcchcH0Il3VkvN2m0RQagLt5a6/wzxbvp3Xll6i",
	"KlecB2x8fIxs4veZ8nj6/rovZod4fWQT//geeTYpUr7lrqLhCTZ0UhrF52p96IJ0nS3KYFMZKvJSU/Gi",
	"5uabuY0dCmKVvbG1iMpBtNtb1KbrqwY8e63Qs+4ht1cozTOKK+rMyW1qlGyoIKdYqhNXWgX+akyLaUzr",
	"TCSEeCQTff54M5lctrp1NC1mlwF4B11P+Bkdr6OaGOunVWt0DI51jW4p3J6tIF4WHB4bOb0UMZm7Uj3O",
	"BOBGjWjGD9GQErNz97TKQdmzHnwvEQ2to9JwPqa38quUdVqJ+YtO6aTbOHNChug/SlLzxG/50Hh0+1Os",
	"1KJreCNFK6Ph8g6yHGiaBBKdTvOx8s7/1HFaj7lBPrlrMyrRUzXPlwd2ZPS+EFflmMjvs2gXaRhrtAKb",
	"2iRAe449F0p9psojLyfigU+IMbhELS+b5NANbdrEDGmioXPDJYUiSpeqsnlhMl0mB6ZMTjGZ+ND1spmF",
	"BRl5Eckb0lPzSP6irEE0oy5NdRcRlKtAOTZJ8EQWBzVZvCYhvvvi24rglO2tkYxdCwMVcuQ08idtEmLe",
	"EEGGYusYjUrct6z0bn4XVQh0RjWr3cYzFKlNKQZOM5tkiQmNnt2qG9VdeLtdTUTjPsEgEExfoUQ7bSxC",
	"bxG/Vpuszzcf6fnlCNnKglA3rx1SePT4K5zPbHn35uTV63cn79rny1RlHBlZOekU1egX4GLgsyMg5gcB",
	"RUy6dQugM3CEhyfk2LiNP3k9EP82zetJg2MshwkHDlq4GDkCECU24ge+QsAOKRUQEoxMmAwMDgdbxeBW",
	"3IINYi9q6GWlm1XDdlvNsEkkwORmfQtlAPulztdTg/saNY8ZNXUTu8KZw1TRf9pRBycWbKtK6Z4s/XBJ",
	"yLou3CQRJ7//OA+nUqUbzxrZNhcfL69uJudWzzr78fTyo/zrw+nFz/KPy6vb3z9dnV98uJicG6RKFJU5",
	"Pyu3bTa1V1InU8EpTZVhEFkAHfIBcpi7NYoWI1xNb08vz09/vrqcWD3r9mJyk0s/Sn7OoUr7m8W5MwtZ",
	"YhWn3Df3tahKwozqCyqrBgqvqdX4krwkxiHlZXO/7Q9HYDgqn1u7L+c19wPF+YPDwWjQrHy2Mp2wPzoa",
	"1t4QJRCkZyuySg0y7uZmtlnhRQRGXHeRYYRdFpq04JnuYKS465+bs9fm7NGMJcpUoJ6ENWLyRvrRVCh1",
	"OSFdOLykNHTLlZ3brNDUQV9xCLiMu3YB9E7ozxuFFqJqZpev1YWjHP4eMtc+Dfkqz9zyJwBDvkKY642A",
	"7+aQodcvvwsZouMAMnZPqPP990fRJUI07DQ1zNIdVOSGxe8Ji644D2I7dKEzWS2G6J1Shu8RpIiWQCh/",
	"A5z8C2EAHQc5ADK5NKHuvxXAKwQdRIWFL48kcO/yFZjLgSbQaqYKqOUDdWDbHgkd1WDG1ceiTTCHttSp",
	"yJd1qBYLg4BQ/r8wuHcddGQTPwHkVH4HpuoRS98ZxheFxpBcE5v3lNwzBCB2QMiQ9Br0bObN1c1kegtO",
	"ry/EVhD12dViiuida5vXkff390cp4LjLPQM6cz411V0Up7fuhkdDGUkJEIaBa42tk6PB0YnVswLIV5Ln",
	"jjPHSUDUmSPYOnbHrWvC+GnqXlIbRe+Js95ac6CCbj4F/YFOMTCWABoQy1RJ2m1KNV4abbHxUmHKRR5S",
	"Fto2YmwReiBGp2qoNChbIQb5WDwk9UTo+5CurbFqF4AABBjdg/QtMYdLJjSxSaMvkUTEa/eFH6m7Qsi5",
	"TeIff3WdRyXWUaJVmgdUAtZpxnELIIU+4vJu/re0j+oKHAhGSyRKOmhpOvUMnNdH478UU7Up3l82wfvL",
	"DN7VxgHEGyBdI/WxZy1RgXx9RPx5IvZ5iEsnsn1EfDOaCUoJrzvkeRb7G5CNIly8zKwxwyU/ABtiMEfA",
	"IRgBF4NAmBOA8bWHgE8cdAQ+EAo0mccz/HfAZCq4mMZ1xGfdpU0eJq7s1Sb++nzzs/jRhp4nP/uIr4jg",
	"howGD58Fhx0Ojd0fGp0lRvU+2UxohLRkjxaJygZ6j+WZMo2bKeLA5YATIO12WRLqucsVRxT8NL26tDTn",
	"/hmiJGNqbP2uq6NMfq31ADZViM3qH4tzNzPeVkMeSdHyg4sdANO4raSj3NgDjyS7TCOmyCUJrWOz2gUq",
	"I/NZ8tQ+EFuSjboFxMpjxfOAbW4owmy8VsWZcup5KcStq83usyQBcBfqsxBRBfoT2Gk49qMzG0K3G0Nb",
	"mNnGrhvT2DSwo/ENretvy+7bmHqbmOuVlKuww8/Me6cDMboRQ8e2JNKMqNZvX8QW07q0i4SlLfOcofvk",
	"JHwyNQ2/cTW9qWnbhdlC1RFQqfOQceIvXOQ5x8a147Fy1eRNeGIDpTd/Rvy5i4V1LVMc+lF2wSwcDE7s",
	"ufwPMZltCRKeBZ7LOHLAHHnkXj16rJ+dYYgdEEAmkxJ8YRWH1AOQAWn+GpMcRYvQYz00/fGKrxA1F12T",
	"ULirMxwyNM48/HfzQRnAxQTI4gEBQYCokBEA0/taUISAMC+B2mF6J0C4zcKmcrESMOGikYUAgwLzdhd8",
	"hx7GemZXjf0fnTgjPo1ex5k96uMNcn6EXC+mB3yf3c8MC9kX60GchjouoSpAamYHBYBdTX9I1h+9diCH",
	"c8jQD8KoW1LE/vSqAct8vCQczTBfQR6RBzCEHenzM7GBGLT0JvzQ427gqRsxlgFb0s9xF/KGkM+wKgIp",
	"2k0mQeOHDKazP1/DtcoeluHszEaPZviCg3vX8wBFPKQ4TWQfcnslAygceAgymWgj6CO2qiCc4VyAQxzd",
	"iXROsh0RdJZKpXt5O5nelriQgWrB/A+0TnmRuYue7JTDwXAwrJ7zIu2YNsh1zC6irgf6BhL7DuLI5sjp",
	"y5SwotUNVdZ6V+d6dtBkdp2z02J6wVoQMCSIJVYROlDQH5lFPw4T+gY92F7oILCgxAe6dKUYIv2kyRkX",
	"DtsOYCRQWWxdYVKJwK3BSRVBOUpqRyffy/vuwCNOXMlQuHamfKHAwW6QHpG9F64CUapZCWSsPMA5ugPD",
	"9hDneKp5zVoWQiOgUQRhQ9jy+Wvbhq01gbMpdrshcGQ+gcsYd/pEbghmJrVvG2iLYYpx1hKWHeJL5ZCZ",
	"2PLIfUPwjMzG7SBKAxOh6aQVHDtEktEDRV36G5LZqGdKw40EmbLvLaI2v4UIy8OOwO0Q35/gA8CyUkmc",
	"ZurIYuC7AfgBhFiWbCDn+7LguirpKIytN0mxy0PzwaWMayjEeaptRIW8QSkcuthji4BMCeVAVfaWrJm0",
	"OStc1oLMTmWfQWb3gFikKC2scPn5umrt9+uyhRPl/zvEzu+G42tAkzzUi11jAV/UiKGnE98bQbuDu5mS",
	"OsxdhsnqSr42uDSIkuVTdqwyHZlEFwSG2QxcDCDQPoIZr5CPgA/imdztTZ8YGfiF0QwjUvFYljJVG+hQ",
	"2ZmlEdQKNwwVhOSK2CIujjT5IuFc4an1ZX5jMWu2dHhMkahxpdovljtUzP5fph+VnXpP0eB8Y6ruPK62",
	"DRQDR7yS9u4lo2MgCVzL1oXMi5xK1k13nClj0qTbTF1UIO1lHYGJOIastk5Vq0YA9V6KAsMsZKtxAUo4",
	"sOJdUBV2dQJBUrZWZU+XLF7abLYg4gA5ijJeAsi4Wn00GL7tD4b9kyEYnoxPBoBQVUoGxmD46uTN6zfv",
	"3gxGw7ejEvgcyJHu0tvC7T6dM+KFUY65Ll2TXDE6GQwGr16CI3BJxO8ryNVDfsg4mIuHZzjZgiw2k2Ew",
	"cocodR0EIohUNA+4CzAnXAeEGYAUAYb40aws7MKzm6m3enapZYpaOu0l70vgOGrDDO7iXgyRsjGEv+MV",
	"00F9fIPqIyu2/1ZxZyWyKgteiescgZAhRxi7S81t4vn/Atfy5VsgZC5exl8blwZYaSdOALwjrpOsoupy",
	"ygX7oKl2drWaf7PLY7rAZde3p5tqyU45LvpCdHNFqUar69HE9GqY73Kebohf5Bi0up9vpya/uaNPdQ0y",
	"HPi2pKxLUj/Qa+umSldiSQMlLXSsmcPDmrngWzRGdmJc7NZiSNsHVmkgnPKWd3bxvKP+6FWpHei0m/Vz",
	"FKXNh3HHoF8Gvg8fVNk+Kw6/9YdGtHDUMYbaLSzYIGO7rlvbXhK4i5vWbiHNWPVdA05Kaluoh4WLnZx+",
	"OFZRl8p8Y0NPXOgYzS6srsIeag0Mr5gLvjbFaQukuSZQCnuZXppl2tXw8uocwm34Yg1O1P35Zk2AKde8",
	"e4tybh7AT+Upgfk6VVIEsVOUXjhJv/6jMtZQKpNp7tpxfmlFFdVE0VOdLtCTZfBgTpx1lC0WUGQmr9nE",
	"0Z+/zjAAMxPAmTUGX8FM8pN62XaSUmaBx54aEGE08/QsYijj0YpO4NFo1xF/DeMhIfXU0i16P88sPThp",
	"sC6nF1+Kr6+makqV+wfe6OfFT1EKoHog0HmAxgMeSXAzsyafZ5b45XGGH3UGXYJQ/UWM8KfK991QrlI1",
	"zSjF5m0kyCy5MK+rjITS6lMv8xaeaMzOhc3s9LLnsEPZG5j2V8iOHXAdslUqlSON/TY8wBB2VLuSLBc0",
	"i0VMMv7ON+Tcbk9edXFNd0mtjzEc6NDZHpGI6GJ5lNxyPAdSPLGtMwYMcVVYgR3AiI9AcvA3NXu62BnH",
	"l5NfP9/83NLceFtqbvgEL0mprfF52sLWyFQmxJhS3RRLreKuRmIEcWIp6uoCEJUXKNCLTMb82HPkk2/W",
	"rmpYd5cU+ndX5GZZlJngcawqfFJ1UAFFgiqxQjhURh0qow6VUTupjHpRXBqVaiKuBLRlmOpQF3GoizjU",
	"RRzqIg51EYe6iENdxDdZF7G9F71scuWZsnjm65zNXuenNC6F8NAS2mttDRn3L3X+yv9pIzNq7CptTO2f",
	"RK/aEnax+O3Fx8ntiyixSiiRlO1Y5DilLUKZMQglowDVPFhwEqfucomoWl2Oyjky17KLNlD5iJwAh9ih",
	"WEY3KdQ246bgATMFMqqGjgtdZjhCx1GBVZoJuydm6Y5jPh9UycAOou3PU340Z6pKCRC/CKONr5+WlBKP",
	"/ziI3kh16IFy8PQPnv7T9EDJa9T4RXHtKhUO7SQO7SQOYZND2OQQNjmETdriG2LkdYZTDN45iLcuooAi",
	"TylD8bSC8sfT6e+3F5ObaU/+eXllfro+vZlc3vbAhXpG/nF1c/3j6WXDvXEX0Ru96JYY4xCiOoSoDq07",
	"pGdd+Ubkv0ZIihUEo/YXeko8+GcehCoD1AxHzXAuHgXah6NM52mPcakMoxZHcPaXl7I/ydpCsIoZYark",
	"nbflqb/TSE/umL7R63SfLMvXBGBf/fPNBMXkQMpTE2jgmiR4q3n6dvwq8bJM0tSLXQ9tGp5dm4ZdGgPp",
	"l/rupZI3ei24flm4CqbWJthpzgca1I6ZugdW/wuw+h6Ol+hl3HVpzZI976DnOkCsqIq4ZhiAr0aN1Wec",
	"XOVZjzNM6Ax/1TVUjzO8VxOkuzzv/N0CCqjdiL065KbJ++nTpx9revyxg1L4C7Qp2nHTgXeV8+676cCh",
	"50DHDIK0Ktxm6oBAlFZjdqw2uisv1YOgV+t7JSpqF2fk1CYBckqPx6c5wtg+yy2z51PxTXMUHNnaeYVY",
	"U4v1QPpvjvTX0XtA1doNa3CnyVXgxrWGtfaH2EdisDzxq6W3FSipr699hjh+DpGuzm7/tijXyMN/QrId",
	"gqNP+ELmbTGZWbXJolO61ofc/0t7I3Js9ZW96MFl8s3sxq66Ceqp5yU2jsBl1Dqz8qbhl7i/5i6kSc/+",
	"hB1FUhA8RTcRLS8/uRQCDYxJ4wj/VR1EjD1EbUgkge+FrYSoFBrZ96hSbH5VT0+Th3eI9vxiHXvxkBBz",
	"w5fXW2YgQLQkoKWXrhKVFFgGIkOGaL1BqBf4zGSeRoeuldvqRVHScFLsouIFD9Dx27w1QsxW8W6Kksm+",
	"bNwiL9dB1jxuNMFaUJ3KSQTNoicrzNEDhdtTeEc2UEytzqfsZnyzRDzDNOVn6YFtGrLNTs32FMc8id2+",
	"Gc+WZCq0Z13oOFnWLfHjDox7YNzNGVdbupsxrXIGU3xb00Wo99V6jyBFNNVXSL4Zo+hSUVsiYA4ZAjpC",
	"EVLPGstGWOPjY4/Y0FsRxsejd+8Gwsznx+oVXMcc+cfDo6ElVtAb+hpxlXFPaAmY9NfJu+eT74yuv8a3",
	"kSdgfGWmlhV/DWKntOJXEN/LxA8lSiGB1Hzb1eOXx/8PAAD//zjxnjsz2gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
